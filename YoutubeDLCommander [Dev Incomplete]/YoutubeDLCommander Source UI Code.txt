

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.youtubedlcommander;

import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Austin
 */
public class YoutubeDL extends javax.swing.JFrame {

    /**
     * Creates new form YoutubeDL
     */
    public YoutubeDL() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        singleCommandGroup = new javax.swing.ButtonGroup();
        IPvSettingsGroup = new javax.swing.ButtonGroup();
        geoBypassSettingsGroup = new javax.swing.ButtonGroup();
        playlistSelectionGroup = new javax.swing.ButtonGroup();
        hlsSelectionGroup = new javax.swing.ButtonGroup();
        continueSelectionGroup = new javax.swing.ButtonGroup();
        callHomeSelectionGroup = new javax.swing.ButtonGroup();
        postProcessorGroup = new javax.swing.ButtonGroup();
        commandOptionsTabs = new javax.swing.JTabbedPane();
        commandGenerationScroll = new javax.swing.JScrollPane();
        commandGenerationPanel = new javax.swing.JPanel();
        commandGenerationLabel = new javax.swing.JLabel();
        videoURLField = new javax.swing.JTextField();
        videoURLLabel = new javax.swing.JLabel();
        verboseLogOutputBox = new javax.swing.JCheckBox();
        customCodeBox = new javax.swing.JCheckBox();
        customCodeField = new javax.swing.JTextField();
        customCodeArgumentsBox = new javax.swing.JCheckBox();
        customCodeArgumentsField = new javax.swing.JTextField();
        resetCommandGenerationSettingsPage = new javax.swing.JButton();
        GeneralOptionsScroll = new javax.swing.JScrollPane();
        generalOptions = new javax.swing.JPanel();
        singleUseCommandsLabel = new javax.swing.JLabel();
        helpRButton = new javax.swing.JRadioButton();
        versionRButton = new javax.swing.JRadioButton();
        updateRButton = new javax.swing.JRadioButton();
        singleCommandResetButton = new javax.swing.JButton();
        generalOptionsLabel = new javax.swing.JLabel();
        ignoreErrorsBox = new javax.swing.JCheckBox();
        abortOnErrorBox = new javax.swing.JCheckBox();
        dumpUserAgentBox = new javax.swing.JCheckBox();
        listExtractorsBox = new javax.swing.JCheckBox();
        extractorDescriptionsBox = new javax.swing.JCheckBox();
        forceGenericExtractorsBox = new javax.swing.JCheckBox();
        defaultSearchBox = new javax.swing.JCheckBox();
        searchPrefixField = new javax.swing.JTextField();
        ignoreConfigBox = new javax.swing.JCheckBox();
        configLocationBox = new javax.swing.JCheckBox();
        configLocationField = new javax.swing.JTextField();
        configDirChooserButton = new javax.swing.JButton();
        flatPlaylistBox = new javax.swing.JCheckBox();
        markedWatchedBox = new javax.swing.JCheckBox();
        noMarkedWatchedBox = new javax.swing.JCheckBox();
        noColorBox = new javax.swing.JCheckBox();
        resetGeneralSettingsPageButton = new javax.swing.JButton();
        NetworkOptionScroll = new javax.swing.JScrollPane();
        networkOptions = new javax.swing.JPanel();
        networkLabel = new javax.swing.JLabel();
        proxyServerBox = new javax.swing.JCheckBox();
        proxyURLField = new javax.swing.JTextField();
        socketTimeoutBox = new javax.swing.JCheckBox();
        socketTimeoutSecondsSpinner = new javax.swing.JSpinner();
        sourceIPAddressBox = new javax.swing.JCheckBox();
        sourceIPField = new javax.swing.JTextField();
        forceIPv4RButton = new javax.swing.JRadioButton();
        forceIPv6RButton = new javax.swing.JRadioButton();
        IPvSelectionResetButton = new javax.swing.JButton();
        geoRestrictionLabel = new javax.swing.JLabel();
        geoProxyBox = new javax.swing.JCheckBox();
        geoProxyURLField = new javax.swing.JTextField();
        geoBypassRButton = new javax.swing.JRadioButton();
        noGeoBypassRButton = new javax.swing.JRadioButton();
        geoBypassSelectionResetButton = new javax.swing.JButton();
        geoBypassCountryCodeBox = new javax.swing.JCheckBox();
        countryCodeField = new javax.swing.JTextField();
        geoBypassIPBlockBox = new javax.swing.JCheckBox();
        geoBypassIPBlockField = new javax.swing.JTextField();
        resetNetworkGeoSettingsPageButton = new javax.swing.JButton();
        videoSelectionScroll = new javax.swing.JScrollPane();
        videoSelectionOptions = new javax.swing.JPanel();
        videoSelectionLabel = new javax.swing.JLabel();
        playlistStartBox = new javax.swing.JCheckBox();
        playlistStartNoSpinner = new javax.swing.JSpinner();
        playlistEndNoBox = new javax.swing.JCheckBox();
        playlistEndNoSpinner = new javax.swing.JSpinner();
        playlistItemsBox = new javax.swing.JCheckBox();
        playlistItemsField = new javax.swing.JTextField();
        matchTitleBox = new javax.swing.JCheckBox();
        matchTitleField = new javax.swing.JTextField();
        rejectTitleBox = new javax.swing.JCheckBox();
        rejectTitleField = new javax.swing.JTextField();
        maxDownloadsNoBox = new javax.swing.JCheckBox();
        maxDownloadsNoSpinner = new javax.swing.JSpinner();
        minFileSizeBox = new javax.swing.JCheckBox();
        minFileSizeField = new javax.swing.JTextField();
        maxFileSizeBox = new javax.swing.JCheckBox();
        maxFileSizeField = new javax.swing.JTextField();
        dateBox = new javax.swing.JCheckBox();
        dateField = new javax.swing.JTextField();
        dateBeforeBox = new javax.swing.JCheckBox();
        dateBeforeField = new javax.swing.JTextField();
        dateAfterBox = new javax.swing.JCheckBox();
        dateAfterField = new javax.swing.JTextField();
        minViewsBox = new javax.swing.JCheckBox();
        minViewsSpinner = new javax.swing.JSpinner();
        maxViewsBox = new javax.swing.JCheckBox();
        maxViewsSpinner = new javax.swing.JSpinner();
        matchFilterBox = new javax.swing.JCheckBox();
        matchFilterField = new javax.swing.JTextField();
        noPlaylistRButton = new javax.swing.JRadioButton();
        yesPlaylistRButton = new javax.swing.JRadioButton();
        playlistSelectionResetButton = new javax.swing.JButton();
        ageLimitBox = new javax.swing.JCheckBox();
        ageLimitSpinner = new javax.swing.JSpinner();
        downloadArchiveBox = new javax.swing.JCheckBox();
        downloadArchivePathField = new javax.swing.JTextField();
        downloadArchiveFileChooserButton = new javax.swing.JButton();
        includeAddsBox = new javax.swing.JCheckBox();
        resetVideoSelectionSettingsPage = new javax.swing.JButton();
        downloadScroll = new javax.swing.JScrollPane();
        downloadOptions = new javax.swing.JPanel();
        downloadLabel = new javax.swing.JLabel();
        limitRateBox = new javax.swing.JCheckBox();
        limitRateField = new javax.swing.JTextField();
        retriesBox = new javax.swing.JCheckBox();
        retriesSpinner = new javax.swing.JSpinner();
        fragmentRetriesBox = new javax.swing.JCheckBox();
        fragmentRetriesSpinner = new javax.swing.JSpinner();
        skipUnavailableFragmentsBox = new javax.swing.JCheckBox();
        abortOnUnavailableFragmentBox = new javax.swing.JCheckBox();
        keepFragmentsBox = new javax.swing.JCheckBox();
        bufferSizeBox = new javax.swing.JCheckBox();
        bufferSizeField = new javax.swing.JTextField();
        noResizeBufferBox = new javax.swing.JCheckBox();
        httpChunkSizeBox = new javax.swing.JCheckBox();
        httpChunkSizeField = new javax.swing.JTextField();
        playlistReverseBox = new javax.swing.JCheckBox();
        playlistRandomBox = new javax.swing.JCheckBox();
        xattrSetFilesizeBox = new javax.swing.JCheckBox();
        hlsPreferNativeRButton = new javax.swing.JRadioButton();
        hlsPreferFfmpegRButton = new javax.swing.JRadioButton();
        hlsSelectionResetButton = new javax.swing.JToggleButton();
        hlsUseMpegtsBox = new javax.swing.JCheckBox();
        externalDownloaderBox = new javax.swing.JCheckBox();
        externalDownloaderField = new javax.swing.JTextField();
        externalDownloaderArgsBox = new javax.swing.JCheckBox();
        externalDownloaderArgsField = new javax.swing.JTextField();
        resetDownloaderOptionsSettingsPage = new javax.swing.JButton();
        filesystemScroll = new javax.swing.JScrollPane();
        fileSystemOptions = new javax.swing.JPanel();
        filesystemLabel = new javax.swing.JLabel();
        batchFileBox = new javax.swing.JCheckBox();
        batchFileField = new javax.swing.JTextField();
        batchFileSelectorButton = new javax.swing.JButton();
        idBox = new javax.swing.JCheckBox();
        outputBox = new javax.swing.JCheckBox();
        outputField = new javax.swing.JTextField();
        outputPlaceholderBox = new javax.swing.JCheckBox();
        outputPlaceholderField = new javax.swing.JTextField();
        autoNumberStartBox = new javax.swing.JCheckBox();
        autoNumberStartField = new javax.swing.JTextField();
        restrictFilenamesBox = new javax.swing.JCheckBox();
        noOverwritesBox = new javax.swing.JCheckBox();
        continueRButton = new javax.swing.JRadioButton();
        noContinueRButton = new javax.swing.JRadioButton();
        resetContinueSelectionGroupButton = new javax.swing.JButton();
        noPartBox = new javax.swing.JCheckBox();
        noMTimeBox = new javax.swing.JCheckBox();
        writeDescriptionBox = new javax.swing.JCheckBox();
        writeInfoJsonBox = new javax.swing.JCheckBox();
        writeAnnotationsBox = new javax.swing.JCheckBox();
        loadInfoJsonBox = new javax.swing.JCheckBox();
        loadInfoJsonField = new javax.swing.JTextField();
        loadJsonFileChooserButton = new javax.swing.JButton();
        cookieBox = new javax.swing.JCheckBox();
        cookieField = new javax.swing.JTextField();
        loadCookieDirChooserButton = new javax.swing.JButton();
        cacheDirBox = new javax.swing.JCheckBox();
        cacheDirField = new javax.swing.JTextField();
        loadCookieDirChooser = new javax.swing.JButton();
        noCacheDirBox = new javax.swing.JCheckBox();
        rmCacheDirBox = new javax.swing.JCheckBox();
        resetFilesystemSettingsPageButton = new javax.swing.JButton();
        ThumbnailScroll = new javax.swing.JScrollPane();
        thumbnailOptions = new javax.swing.JPanel();
        thumbnailLabel = new javax.swing.JLabel();
        writeThumbnailBox = new javax.swing.JCheckBox();
        writeAllThumbnailsBox = new javax.swing.JCheckBox();
        listThumbnailsBox = new javax.swing.JCheckBox();
        resetThumnailSettingsPage = new javax.swing.JButton();
        verbositySimulationScroll = new javax.swing.JScrollPane();
        verbositySimulationPanel = new javax.swing.JPanel();
        verbositySimulationLabel = new javax.swing.JLabel();
        quietBox = new javax.swing.JCheckBox();
        noWarningsBox = new javax.swing.JCheckBox();
        simulateBox = new javax.swing.JCheckBox();
        skipDownloadBox = new javax.swing.JCheckBox();
        getURLBox = new javax.swing.JCheckBox();
        getTitleBox = new javax.swing.JCheckBox();
        getIDBox = new javax.swing.JCheckBox();
        getThumbnailBox = new javax.swing.JCheckBox();
        getDescriptionBox = new javax.swing.JCheckBox();
        getDurationBox = new javax.swing.JCheckBox();
        getFilenameBox = new javax.swing.JCheckBox();
        getFormatBox = new javax.swing.JCheckBox();
        dumpJsonBox = new javax.swing.JCheckBox();
        dumpSingleJsonBox = new javax.swing.JCheckBox();
        dumpSingleJsonField1 = new javax.swing.JLabel();
        dumpSingleJsonField2 = new javax.swing.JLabel();
        printJsonBox = new javax.swing.JCheckBox();
        printJsonLabel = new javax.swing.JLabel();
        newlineBox = new javax.swing.JCheckBox();
        noProgressBox = new javax.swing.JCheckBox();
        consoleTitleBox = new javax.swing.JCheckBox();
        verboseBox = new javax.swing.JCheckBox();
        dumpPagesBox = new javax.swing.JCheckBox();
        dumpPagesLabel = new javax.swing.JLabel();
        writePagesBox = new javax.swing.JCheckBox();
        writePagesField = new javax.swing.JLabel();
        printTrafficBox = new javax.swing.JCheckBox();
        callHomeRButton = new javax.swing.JRadioButton();
        noCallHomeRButton = new javax.swing.JRadioButton();
        callHomeSelectionResetButton = new javax.swing.JButton();
        resetVerbositySimulationSettingsPageButton = new javax.swing.JButton();
        printTrafficField = new javax.swing.JLabel();
        workaroundsScroll = new javax.swing.JScrollPane();
        workaroundPanel = new javax.swing.JPanel();
        workaroundsLabel = new javax.swing.JLabel();
        encodingBox = new javax.swing.JCheckBox();
        encodingField = new javax.swing.JTextField();
        noCheckCertificateBox = new javax.swing.JCheckBox();
        preferInsecureBox = new javax.swing.JCheckBox();
        preferInsecureLabel = new javax.swing.JLabel();
        userAgentBox = new javax.swing.JCheckBox();
        userAgentField = new javax.swing.JTextField();
        refererBox = new javax.swing.JCheckBox();
        refererLabel = new javax.swing.JLabel();
        refererField = new javax.swing.JTextField();
        addHeaderBox = new javax.swing.JCheckBox();
        addHeaderLabel1 = new javax.swing.JLabel();
        headerField = new javax.swing.JTextField();
        valueField = new javax.swing.JTextField();
        headerListScroll = new javax.swing.JScrollPane();
        headerList = new javax.swing.JList<>();
        addHeaderLabel = new javax.swing.JLabel();
        deleteHeaderButton = new javax.swing.JButton();
        clearHeaderListButton = new javax.swing.JButton();
        addHeaderButton = new javax.swing.JButton();
        bidiWorkaroundBox = new javax.swing.JCheckBox();
        bidiWorkaroundLabel = new javax.swing.JLabel();
        sleepIntervalBox = new javax.swing.JCheckBox();
        sleepIntervalSecondsSpinner = new javax.swing.JSpinner();
        maxSleepIntervalBox = new javax.swing.JCheckBox();
        maxSleepIntervalSpinner = new javax.swing.JSpinner();
        resetWorkaroundSettingsPage = new javax.swing.JButton();
        videoFormatScroll = new javax.swing.JScrollPane();
        videoFormatOptions = new javax.swing.JPanel();
        videoFormatLabel = new javax.swing.JLabel();
        videoFormatCodeBox = new javax.swing.JCheckBox();
        videoFormatField = new javax.swing.JTextField();
        allFormatsBox = new javax.swing.JCheckBox();
        preferFreeFormatsBox = new javax.swing.JCheckBox();
        listFormatsBox = new javax.swing.JCheckBox();
        youTubeSkipDashBox = new javax.swing.JCheckBox();
        mergeOutputFormatBox = new javax.swing.JCheckBox();
        resetVideoFormatSettingsPage = new javax.swing.JButton();
        subtitleScroll = new javax.swing.JScrollPane();
        subtitleOptions = new javax.swing.JPanel();
        subtitleLabel = new javax.swing.JLabel();
        writeSubBox = new javax.swing.JCheckBox();
        writeAutoSubBox = new javax.swing.JCheckBox();
        allSubsBox = new javax.swing.JCheckBox();
        listSubsBox = new javax.swing.JCheckBox();
        subFormatBox = new javax.swing.JCheckBox();
        subFormatField = new javax.swing.JTextField();
        subLangBox = new javax.swing.JCheckBox();
        subLangField = new javax.swing.JTextField();
        subtitleSettingsPageReset = new javax.swing.JButton();
        authenticationScroll = new javax.swing.JScrollPane();
        authenticationOptions = new javax.swing.JPanel();
        authenticationLabel = new javax.swing.JLabel();
        userNameBox = new javax.swing.JCheckBox();
        userNameField = new javax.swing.JTextField();
        passwordBox = new javax.swing.JCheckBox();
        passwordField = new javax.swing.JPasswordField();
        showPasswordBox = new javax.swing.JCheckBox();
        twoFactorBox = new javax.swing.JCheckBox();
        twoFactorField = new javax.swing.JTextField();
        netrcBox = new javax.swing.JCheckBox();
        videoPasswordBox = new javax.swing.JCheckBox();
        videoPasswordField = new javax.swing.JTextField();
        authenticationSettingsPageResetButton = new javax.swing.JButton();
        adobePassScroll = new javax.swing.JScrollPane();
        adobePassOptions = new javax.swing.JPanel();
        adobePassLabel = new javax.swing.JLabel();
        adobePassMSOBox = new javax.swing.JCheckBox();
        adobeMSOField = new javax.swing.JTextField();
        adobePassAccountBox = new javax.swing.JCheckBox();
        adobeUserNameField = new javax.swing.JTextField();
        adobePasswordField = new javax.swing.JPasswordField();
        adobeShowPasswordBox = new javax.swing.JCheckBox();
        apListMSOBox = new javax.swing.JCheckBox();
        adobePassSettingsPageReset = new javax.swing.JButton();
        postProcessingScroll = new javax.swing.JScrollPane();
        postProcessingPanel = new javax.swing.JPanel();
        postProcessingLabel = new javax.swing.JLabel();
        extractAudioBox = new javax.swing.JCheckBox();
        extractAudioLabel = new javax.swing.JLabel();
        audioFormatBox = new javax.swing.JCheckBox();
        audioFormatComboBox = new javax.swing.JComboBox<>();
        audioQualityBox = new javax.swing.JCheckBox();
        audioQualityLabel = new javax.swing.JLabel();
        audioQualityValueSpinner = new javax.swing.JSpinner();
        recodeVideoBox = new javax.swing.JCheckBox();
        recodeVideoComboBox = new javax.swing.JComboBox<>();
        postProcessorArgsBox = new javax.swing.JCheckBox();
        postProcessorArgsField = new javax.swing.JTextField();
        keepVideoBox = new javax.swing.JCheckBox();
        keepVideoLabel = new javax.swing.JLabel();
        noPostOverwritesBox = new javax.swing.JCheckBox();
        embedSubBox = new javax.swing.JCheckBox();
        embedSubLabel = new javax.swing.JLabel();
        embedThumbnailBox = new javax.swing.JCheckBox();
        addMetaDataBox = new javax.swing.JCheckBox();
        metaDataFromTitleBox = new javax.swing.JCheckBox();
        metaDataFromTitleLabel = new javax.swing.JLabel();
        metaDataFromTitleField = new javax.swing.JTextField();
        xattrsBox = new javax.swing.JCheckBox();
        xattrsLabel = new javax.swing.JLabel();
        fixUpBox = new javax.swing.JCheckBox();
        fixUpLabel = new javax.swing.JLabel();
        fixUpField = new javax.swing.JTextField();
        preferAvconvRButton = new javax.swing.JRadioButton();
        preferFfmpegRButton = new javax.swing.JRadioButton();
        postProcessorSettingResetButton = new javax.swing.JButton();
        ffmpegLocationPathBox = new javax.swing.JCheckBox();
        ffmpegLocationPathLabel = new javax.swing.JLabel();
        ffmpegLocationField = new javax.swing.JTextField();
        ffmpegDirChooserButton = new javax.swing.JButton();
        execBox = new javax.swing.JCheckBox();
        execField = new javax.swing.JTextField();
        convertSubBox = new javax.swing.JCheckBox();
        convertSubComboBox = new javax.swing.JComboBox<>();
        resetWorkaroundsSettingsPageButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        logScroll = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        settingsHeader = new javax.swing.JLabel();
        outputsHeader = new javax.swing.JLabel();
        outputScroll = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        logLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        copyLogToClipboardButton = new javax.swing.JButton();
        copyOutputToClipboardButton = new javax.swing.JButton();
        resetAllSettingsAndData = new javax.swing.JButton();
        editorModeBox = new javax.swing.JCheckBox();
        generateCommandsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        commandOptionsTabs.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        commandGenerationScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        commandGenerationScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        commandGenerationLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        commandGenerationLabel.setText("Command Generation Options");

        videoURLField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        videoURLLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        videoURLLabel.setText("Video or Playlist URL (Website or YouTube) (Required)");

        verboseLogOutputBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        verboseLogOutputBox.setText("Verbose Logging output (useful for analysis/debugging)");

        customCodeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        customCodeBox.setText("Custom Code");
        customCodeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customCodeBoxActionPerformed(evt);
            }
        });

        customCodeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        customCodeField.setText("CODE_NOT_ENABLED");
        customCodeField.setEnabled(false);

        customCodeArgumentsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        customCodeArgumentsBox.setText("Custom Code Arguments");
        customCodeArgumentsBox.setEnabled(false);
        customCodeArgumentsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customCodeArgumentsBoxActionPerformed(evt);
            }
        });

        customCodeArgumentsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        customCodeArgumentsField.setText("CODE_ARG_NOT_ENABLED");
        customCodeArgumentsField.setEnabled(false);
        customCodeArgumentsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customCodeArgumentsFieldActionPerformed(evt);
            }
        });

        resetCommandGenerationSettingsPage.setText("Reset All Page Settings");
        resetCommandGenerationSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCommandGenerationSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout commandGenerationPanelLayout = new javax.swing.GroupLayout(commandGenerationPanel);
        commandGenerationPanel.setLayout(commandGenerationPanelLayout);
        commandGenerationPanelLayout.setHorizontalGroup(
            commandGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commandGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(customCodeArgumentsBox)
                    .addComponent(commandGenerationLabel)
                    .addComponent(videoURLLabel)
                    .addComponent(verboseLogOutputBox)
                    .addComponent(resetCommandGenerationSettingsPage)
                    .addComponent(customCodeBox)
                    .addComponent(videoURLField)
                    .addComponent(customCodeField)
                    .addComponent(customCodeArgumentsField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        commandGenerationPanelLayout.setVerticalGroup(
            commandGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commandGenerationLabel)
                .addGap(18, 18, 18)
                .addComponent(videoURLLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(videoURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(verboseLogOutputBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customCodeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customCodeArgumentsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customCodeArgumentsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetCommandGenerationSettingsPage)
                .addContainerGap())
        );

        commandGenerationScroll.setViewportView(commandGenerationPanel);

        commandOptionsTabs.addTab("Command Generation", commandGenerationScroll);

        GeneralOptionsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        singleUseCommandsLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        singleUseCommandsLabel.setText("Single Application Commands:");

        singleCommandGroup.add(helpRButton);
        helpRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        helpRButton.setText("Print Help Text and Exit");
        helpRButton.setToolTipText("This option cannot be combined with any other option.");
        helpRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpRButtonActionPerformed(evt);
            }
        });

        singleCommandGroup.add(versionRButton);
        versionRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        versionRButton.setText("Print Program Version and Exit");
        versionRButton.setToolTipText("This option cannot be combined with any other option.");
        versionRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionRButtonActionPerformed(evt);
            }
        });

        singleCommandGroup.add(updateRButton);
        updateRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateRButton.setText("Update Program to Latest Version and Exit");
        updateRButton.setToolTipText("This option cannot be combined with any other option.");
        updateRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRButtonActionPerformed(evt);
            }
        });

        singleCommandResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        singleCommandResetButton.setText("Reset Selection");
        singleCommandResetButton.setEnabled(false);
        singleCommandResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleCommandResetButtonActionPerformed(evt);
            }
        });

        generalOptionsLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        generalOptionsLabel.setText("General Options:");

        ignoreErrorsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ignoreErrorsBox.setText("Continue on download errors (skip unavailable videosin playlist)");
        ignoreErrorsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreErrorsBoxActionPerformed(evt);
            }
        });

        abortOnErrorBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        abortOnErrorBox.setText("Abort downloading further videos if an error occurs");

        dumpUserAgentBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpUserAgentBox.setText("Display the current browser identification");
        dumpUserAgentBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dumpUserAgentBoxActionPerformed(evt);
            }
        });

        listExtractorsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        listExtractorsBox.setText("List all supported extractors");

        extractorDescriptionsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        extractorDescriptionsBox.setText("Ouput descriptions of all supported extractors");

        forceGenericExtractorsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        forceGenericExtractorsBox.setText("Force the use of generic extractors");

        defaultSearchBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        defaultSearchBox.setText("Default-Search: Use Prefix for unqualified URLs");
        defaultSearchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultSearchBoxActionPerformed(evt);
            }
        });

        searchPrefixField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchPrefixField.setText("DEFAULT_SEARCH_NOT_ENABLED");
        searchPrefixField.setEnabled(false);
        searchPrefixField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPrefixFieldActionPerformed(evt);
            }
        });

        ignoreConfigBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ignoreConfigBox.setText("Do not read configuration files");
        ignoreConfigBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreConfigBoxActionPerformed(evt);
            }
        });

        configLocationBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        configLocationBox.setText("Set Location (Path or Directory) of the configuration file");
        configLocationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configLocationBoxActionPerformed(evt);
            }
        });

        configLocationField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        configLocationField.setText("CONFIG_LOCATION_NOT_ENABLED");
        configLocationField.setEnabled(false);
        configLocationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configLocationFieldActionPerformed(evt);
            }
        });

        configDirChooserButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        configDirChooserButton.setText("Select File or Directory");
        configDirChooserButton.setEnabled(false);
        configDirChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configDirChooserButtonActionPerformed(evt);
            }
        });

        flatPlaylistBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        flatPlaylistBox.setText("Do not extract the videos of a playlist (Only List Them)");

        markedWatchedBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        markedWatchedBox.setText("Mark Video Watched (YouTube Only)");

        noMarkedWatchedBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noMarkedWatchedBox.setText("Do NOT mark videos as watched (YouTube Only)");

        noColorBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noColorBox.setText("Do NOT emit color codes in output");

        resetGeneralSettingsPageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetGeneralSettingsPageButton.setText("Reset All Page Settings");
        resetGeneralSettingsPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGeneralSettingsPageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generalOptionsLayout = new javax.swing.GroupLayout(generalOptions);
        generalOptions.setLayout(generalOptionsLayout);
        generalOptionsLayout.setHorizontalGroup(
            generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dumpUserAgentBox)
                    .addComponent(singleUseCommandsLabel)
                    .addComponent(versionRButton)
                    .addComponent(helpRButton)
                    .addComponent(updateRButton)
                    .addComponent(ignoreErrorsBox)
                    .addComponent(generalOptionsLabel)
                    .addComponent(listExtractorsBox)
                    .addComponent(forceGenericExtractorsBox)
                    .addGroup(generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(defaultSearchBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(extractorDescriptionsBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(abortOnErrorBox)
                    .addComponent(ignoreConfigBox)
                    .addComponent(markedWatchedBox)
                    .addGroup(generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(noColorBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noMarkedWatchedBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(singleCommandResetButton)
                    .addComponent(resetGeneralSettingsPageButton)
                    .addComponent(configDirChooserButton)
                    .addGroup(generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(configLocationField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(searchPrefixField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(configLocationBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(flatPlaylistBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generalOptionsLayout.setVerticalGroup(
            generalOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleUseCommandsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(versionRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(singleCommandResetButton)
                .addGap(18, 18, 18)
                .addComponent(generalOptionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ignoreErrorsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(abortOnErrorBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dumpUserAgentBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listExtractorsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(extractorDescriptionsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forceGenericExtractorsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defaultSearchBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchPrefixField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ignoreConfigBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(configLocationBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(configLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(configDirChooserButton)
                .addGap(18, 18, 18)
                .addComponent(flatPlaylistBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(markedWatchedBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noMarkedWatchedBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noColorBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(resetGeneralSettingsPageButton)
                .addContainerGap())
        );

        GeneralOptionsScroll.setViewportView(generalOptions);

        commandOptionsTabs.addTab("General Options", GeneralOptionsScroll);

        NetworkOptionScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        networkLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        networkLabel.setText("Network Options:");

        proxyServerBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        proxyServerBox.setText("Use the specified HTTP/HTTPS/SOCKS Proxy Server URL");
        proxyServerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyServerBoxActionPerformed(evt);
            }
        });

        proxyURLField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        proxyURLField.setText("PROXY_SERVER_NOT_ENABLED");
        proxyURLField.setEnabled(false);
        proxyURLField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyURLFieldActionPerformed(evt);
            }
        });

        socketTimeoutBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        socketTimeoutBox.setText("Socket Timeout (time to wait before giving up)");
        socketTimeoutBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socketTimeoutBoxActionPerformed(evt);
            }
        });

        socketTimeoutSecondsSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        socketTimeoutSecondsSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        socketTimeoutSecondsSpinner.setEnabled(false);

        sourceIPAddressBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sourceIPAddressBox.setText("Client-side IP address to bind/connect to");
        sourceIPAddressBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceIPAddressBoxActionPerformed(evt);
            }
        });

        sourceIPField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sourceIPField.setText("SOURCE_ADDRESS_IP_NOT_ENABLED");
        sourceIPField.setEnabled(false);

        IPvSettingsGroup.add(forceIPv4RButton);
        forceIPv4RButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        forceIPv4RButton.setText("Force all connections via IPv4");
        forceIPv4RButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceIPv4RButtonActionPerformed(evt);
            }
        });

        IPvSettingsGroup.add(forceIPv6RButton);
        forceIPv6RButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        forceIPv6RButton.setText("Force all connections via IPv6");
        forceIPv6RButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceIPv6RButtonActionPerformed(evt);
            }
        });

        IPvSelectionResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IPvSelectionResetButton.setText("Reset Selection");
        IPvSelectionResetButton.setEnabled(false);
        IPvSelectionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPvSelectionResetButtonActionPerformed(evt);
            }
        });

        geoRestrictionLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        geoRestrictionLabel.setText("Geo Restriction:");

        geoProxyBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoProxyBox.setText("Use proxy to verify the IP address for geo-restricted sites");
        geoProxyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoProxyBoxActionPerformed(evt);
            }
        });

        geoProxyURLField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoProxyURLField.setText("GEO_PROXY_URL_NOT_ENALBED");
        geoProxyURLField.setEnabled(false);
        geoProxyURLField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoProxyURLFieldActionPerformed(evt);
            }
        });

        geoBypassSettingsGroup.add(geoBypassRButton);
        geoBypassRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoBypassRButton.setText("Bypass Geo-Restriction via faking X-Forwarding");
        geoBypassRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoBypassRButtonActionPerformed(evt);
            }
        });

        geoBypassSettingsGroup.add(noGeoBypassRButton);
        noGeoBypassRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noGeoBypassRButton.setText("Do NOT bypass Geo-Restrictions via faking X-Forwarding");
        noGeoBypassRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noGeoBypassRButtonActionPerformed(evt);
            }
        });

        geoBypassSelectionResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoBypassSelectionResetButton.setText("Reset Selection");
        geoBypassSelectionResetButton.setEnabled(false);
        geoBypassSelectionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoBypassSelectionResetButtonActionPerformed(evt);
            }
        });

        geoBypassCountryCodeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoBypassCountryCodeBox.setText("Force Geo-Bypass with two letter ISO Country Code");
        geoBypassCountryCodeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoBypassCountryCodeBoxActionPerformed(evt);
            }
        });

        countryCodeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        countryCodeField.setText("ISO_COUNTRY_CODE_NOT_ENABLED");
        countryCodeField.setEnabled(false);

        geoBypassIPBlockBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoBypassIPBlockBox.setText("Force bypass Geo-Restriction with IP Block (CIDR notation)");
        geoBypassIPBlockBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoBypassIPBlockBoxActionPerformed(evt);
            }
        });

        geoBypassIPBlockField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        geoBypassIPBlockField.setText("GEO_BYPASS_IP_BLOCK");
        geoBypassIPBlockField.setEnabled(false);

        resetNetworkGeoSettingsPageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetNetworkGeoSettingsPageButton.setText("Reset All Page Settings");
        resetNetworkGeoSettingsPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetNetworkGeoSettingsPageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkOptionsLayout = new javax.swing.GroupLayout(networkOptions);
        networkOptions.setLayout(networkOptionsLayout);
        networkOptionsLayout.setHorizontalGroup(
            networkOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(networkOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(geoBypassRButton)
                    .addGroup(networkOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(networkLabel)
                        .addComponent(proxyServerBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(proxyURLField)
                        .addComponent(socketTimeoutBox)
                        .addComponent(socketTimeoutSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sourceIPAddressBox)
                        .addComponent(sourceIPField)
                        .addComponent(forceIPv4RButton)
                        .addComponent(forceIPv6RButton)
                        .addComponent(IPvSelectionResetButton)
                        .addComponent(geoRestrictionLabel)
                        .addComponent(geoProxyBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(geoProxyURLField))
                    .addComponent(geoBypassSelectionResetButton)
                    .addComponent(geoBypassCountryCodeBox)
                    .addGroup(networkOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(geoBypassIPBlockField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(countryCodeField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(noGeoBypassRButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(geoBypassIPBlockBox)
                    .addComponent(resetNetworkGeoSettingsPageButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        networkOptionsLayout.setVerticalGroup(
            networkOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(networkLabel)
                .addGap(18, 18, 18)
                .addComponent(proxyServerBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proxyURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(socketTimeoutBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(socketTimeoutSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sourceIPAddressBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourceIPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(forceIPv4RButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forceIPv6RButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(IPvSelectionResetButton)
                .addGap(18, 18, 18)
                .addComponent(geoRestrictionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(geoProxyBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(geoProxyURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(geoBypassRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noGeoBypassRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(geoBypassSelectionResetButton)
                .addGap(18, 18, 18)
                .addComponent(geoBypassCountryCodeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(countryCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(geoBypassIPBlockBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geoBypassIPBlockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resetNetworkGeoSettingsPageButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        NetworkOptionScroll.setViewportView(networkOptions);

        commandOptionsTabs.addTab("Network & Geo Restriction", NetworkOptionScroll);

        videoSelectionScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        videoSelectionLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        videoSelectionLabel.setText("Video Selection Options");

        playlistStartBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistStartBox.setText("Playlist video to start downloading at");
        playlistStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistStartBoxActionPerformed(evt);
            }
        });

        playlistStartNoSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistStartNoSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        playlistStartNoSpinner.setEnabled(false);

        playlistEndNoBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistEndNoBox.setText("Playlist video to end download at (-1 is \"last\")");
        playlistEndNoBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistEndNoBoxActionPerformed(evt);
            }
        });

        playlistEndNoSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistEndNoSpinner.setModel(new javax.swing.SpinnerNumberModel(-1, -1, null, 1));
        playlistEndNoSpinner.setEnabled(false);

        playlistItemsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistItemsBox.setText("Playlist items to download (playlist separated by commas)");
        playlistItemsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistItemsBoxActionPerformed(evt);
            }
        });

        playlistItemsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistItemsField.setText("PLAYLIST_ITEMS_NOT_ENABLED");
        playlistItemsField.setEnabled(false);

        matchTitleBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        matchTitleBox.setText("Downloads only matching titles (regex or caseless sub-string)");
        matchTitleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchTitleBoxActionPerformed(evt);
            }
        });

        matchTitleField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        matchTitleField.setText("REGEX_NOT_ENABLED");
        matchTitleField.setEnabled(false);
        matchTitleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchTitleFieldActionPerformed(evt);
            }
        });

        rejectTitleBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rejectTitleBox.setText("Skip download for matching titles (regex or caseless sub-string)");
        rejectTitleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectTitleBoxActionPerformed(evt);
            }
        });

        rejectTitleField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rejectTitleField.setText("REGEX_NOT_ENABLED");
        rejectTitleField.setEnabled(false);

        maxDownloadsNoBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxDownloadsNoBox.setText("Abort after downloading Number files");
        maxDownloadsNoBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDownloadsNoBoxActionPerformed(evt);
            }
        });

        maxDownloadsNoSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxDownloadsNoSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        maxDownloadsNoSpinner.setToolTipText("");
        maxDownloadsNoSpinner.setEnabled(false);

        minFileSizeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        minFileSizeBox.setText("Do NOT download any videos smaller than SIZE");
        minFileSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFileSizeBoxActionPerformed(evt);
            }
        });

        minFileSizeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        minFileSizeField.setText("FILE_SIZE_NOT_ENABLED");
        minFileSizeField.setToolTipText("Make sure to use Youtube-DL notation for filesize");
        minFileSizeField.setEnabled(false);

        maxFileSizeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxFileSizeBox.setText("Do NOT download any videos larger than SIZE");
        maxFileSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFileSizeBoxActionPerformed(evt);
            }
        });

        maxFileSizeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxFileSizeField.setText("FILE_SIZE_NOT_ENABLED");
        maxFileSizeField.setToolTipText("Make sure to use Youtube-DL notation for filesize");
        maxFileSizeField.setEnabled(false);

        dateBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateBox.setText("Download only videos uploaded in this DATE");
        dateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateBoxActionPerformed(evt);
            }
        });

        dateField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        dateField.setEnabled(false);

        dateBeforeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateBeforeBox.setText("Download only videos uploaded on or before this DATE (inclusive)");
        dateBeforeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateBeforeBoxActionPerformed(evt);
            }
        });

        dateBeforeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateBeforeField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        dateBeforeField.setEnabled(false);
        dateBeforeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateBeforeFieldActionPerformed(evt);
            }
        });

        dateAfterBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateAfterBox.setText("Download only videos uploaded on or after this DATE (inclusive)");
        dateAfterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAfterBoxActionPerformed(evt);
            }
        });

        dateAfterField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateAfterField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        dateAfterField.setEnabled(false);
        dateAfterField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAfterFieldActionPerformed(evt);
            }
        });

        minViewsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        minViewsBox.setText("Do not download any videos with less than COUNT views");
        minViewsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minViewsBoxActionPerformed(evt);
            }
        });

        minViewsSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        minViewsSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        minViewsSpinner.setEnabled(false);

        maxViewsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxViewsBox.setText("Do not dowload any videos with more than COUNT views");
        maxViewsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxViewsBoxActionPerformed(evt);
            }
        });

        maxViewsSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxViewsSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        maxViewsSpinner.setEnabled(false);

        matchFilterBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        matchFilterBox.setText("Generic video filter");
        matchFilterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchFilterBoxActionPerformed(evt);
            }
        });

        matchFilterField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        matchFilterField.setText("FILTER_NOT_ENABLED");
        matchFilterField.setEnabled(false);

        playlistSelectionGroup.add(noPlaylistRButton);
        noPlaylistRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noPlaylistRButton.setText("Download only the video (if the URL refers to a video and playlist)");
        noPlaylistRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noPlaylistRButtonActionPerformed(evt);
            }
        });

        playlistSelectionGroup.add(yesPlaylistRButton);
        yesPlaylistRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        yesPlaylistRButton.setText("Download the playlist (If the URL refers to a video and a playlist)");
        yesPlaylistRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesPlaylistRButtonActionPerformed(evt);
            }
        });

        playlistSelectionResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistSelectionResetButton.setText("Reset Selection");
        playlistSelectionResetButton.setEnabled(false);
        playlistSelectionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistSelectionResetButtonActionPerformed(evt);
            }
        });

        ageLimitBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ageLimitBox.setText("Download only video suitable for the given age");
        ageLimitBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageLimitBoxActionPerformed(evt);
            }
        });

        ageLimitSpinner.setModel(new javax.swing.SpinnerNumberModel(18, 0, null, 1));
        ageLimitSpinner.setEnabled(false);

        downloadArchiveBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        downloadArchiveBox.setText("Download only videos not listed in the archive file");
        downloadArchiveBox.setToolTipText("The archive file will be updated with the ID's of all downloaded videos in it.");
        downloadArchiveBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadArchiveBoxActionPerformed(evt);
            }
        });

        downloadArchivePathField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        downloadArchivePathField.setText("PATH_TO_ARCHIVE_NOT_ENABLED");
        downloadArchivePathField.setEnabled(false);
        downloadArchivePathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadArchivePathFieldActionPerformed(evt);
            }
        });

        downloadArchiveFileChooserButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        downloadArchiveFileChooserButton.setText("Select Archive File");
        downloadArchiveFileChooserButton.setEnabled(false);
        downloadArchiveFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadArchiveFileChooserButtonActionPerformed(evt);
            }
        });

        includeAddsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        includeAddsBox.setText("Download advertisement as well (Experimental)");

        resetVideoSelectionSettingsPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetVideoSelectionSettingsPage.setText("Reset All Page Settings");
        resetVideoSelectionSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetVideoSelectionSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout videoSelectionOptionsLayout = new javax.swing.GroupLayout(videoSelectionOptions);
        videoSelectionOptions.setLayout(videoSelectionOptionsLayout);
        videoSelectionOptionsLayout.setHorizontalGroup(
            videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoSelectionOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matchFilterBox)
                    .addComponent(videoSelectionLabel)
                    .addGroup(videoSelectionOptionsLayout.createSequentialGroup()
                        .addComponent(playlistStartBox)
                        .addGap(18, 18, 18)
                        .addComponent(playlistStartNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(videoSelectionOptionsLayout.createSequentialGroup()
                        .addComponent(playlistEndNoBox)
                        .addGap(18, 18, 18)
                        .addComponent(playlistEndNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(matchTitleBox)
                    .addComponent(rejectTitleBox)
                    .addGroup(videoSelectionOptionsLayout.createSequentialGroup()
                        .addComponent(maxDownloadsNoBox)
                        .addGap(18, 18, 18)
                        .addComponent(maxDownloadsNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minFileSizeBox)
                    .addComponent(maxFileSizeBox)
                    .addComponent(dateBox)
                    .addComponent(dateBeforeBox)
                    .addComponent(dateAfterBox)
                    .addComponent(minViewsBox)
                    .addComponent(minViewsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxViewsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playlistSelectionResetButton)
                    .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(downloadArchivePathField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, videoSelectionOptionsLayout.createSequentialGroup()
                            .addComponent(ageLimitBox)
                            .addGap(18, 18, 18)
                            .addComponent(ageLimitSpinner))
                        .addComponent(matchFilterField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(maxViewsBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateAfterField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dateBeforeField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dateField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(maxFileSizeField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(minFileSizeField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(rejectTitleField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(matchTitleField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(playlistItemsField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(playlistItemsBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(downloadArchiveBox)
                    .addComponent(downloadArchiveFileChooserButton)
                    .addComponent(includeAddsBox)
                    .addComponent(resetVideoSelectionSettingsPage)
                    .addComponent(noPlaylistRButton)
                    .addComponent(yesPlaylistRButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        videoSelectionOptionsLayout.setVerticalGroup(
            videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoSelectionOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(videoSelectionLabel)
                .addGap(18, 18, 18)
                .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playlistStartBox)
                    .addComponent(playlistStartNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playlistEndNoBox)
                    .addComponent(playlistEndNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playlistItemsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playlistItemsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(matchTitleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matchTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rejectTitleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rejectTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDownloadsNoBox)
                    .addComponent(maxDownloadsNoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minFileSizeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minFileSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(maxFileSizeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxFileSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateBeforeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateBeforeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateAfterBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateAfterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minViewsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minViewsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxViewsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxViewsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matchFilterBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matchFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(noPlaylistRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(yesPlaylistRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playlistSelectionResetButton)
                .addGap(18, 18, 18)
                .addGroup(videoSelectionOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLimitBox)
                    .addComponent(ageLimitSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(downloadArchiveBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(downloadArchivePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(downloadArchiveFileChooserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(includeAddsBox)
                .addGap(18, 18, 18)
                .addComponent(resetVideoSelectionSettingsPage)
                .addGap(18, 18, 18))
        );

        videoSelectionScroll.setViewportView(videoSelectionOptions);

        commandOptionsTabs.addTab("Video Selection", videoSelectionScroll);

        downloadScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        downloadLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        downloadLabel.setText("Download Options");

        limitRateBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        limitRateBox.setText("Maximum download rate in bytes per second");
        limitRateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitRateBoxActionPerformed(evt);
            }
        });

        limitRateField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        limitRateField.setText("RATE_NOT_ENABLED");
        limitRateField.setEnabled(false);

        retriesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        retriesBox.setText("Number of retries (-1 is \"infinite\")");
        retriesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retriesBoxActionPerformed(evt);
            }
        });

        retriesSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        retriesSpinner.setModel(new javax.swing.SpinnerNumberModel(10, -1, null, 1));
        retriesSpinner.setEnabled(false);

        fragmentRetriesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fragmentRetriesBox.setText("Number of retries for a fragment (-1 is \"infinite\")");
        fragmentRetriesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fragmentRetriesBoxActionPerformed(evt);
            }
        });

        fragmentRetriesSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fragmentRetriesSpinner.setModel(new javax.swing.SpinnerNumberModel(10, -1, null, 1));
        fragmentRetriesSpinner.setEnabled(false);

        skipUnavailableFragmentsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        skipUnavailableFragmentsBox.setText("Skip unavailable fragments");

        abortOnUnavailableFragmentBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        abortOnUnavailableFragmentBox.setText("Abort downloading when some fragment is not available");

        keepFragmentsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        keepFragmentsBox.setText("Keep downloaded fragments on disk after downloading is finished");

        bufferSizeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bufferSizeBox.setText("Size of download buffer");
        bufferSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bufferSizeBoxActionPerformed(evt);
            }
        });

        bufferSizeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bufferSizeField.setText("BUFFER_SIZE_NOT_ENABLED");
        bufferSizeField.setEnabled(false);

        noResizeBufferBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noResizeBufferBox.setText("Do not automatically resize the buffer size");

        httpChunkSizeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        httpChunkSizeBox.setText("Size of a chunk for chunk-based HTTP downloading (Experimental)");
        httpChunkSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                httpChunkSizeBoxActionPerformed(evt);
            }
        });

        httpChunkSizeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        httpChunkSizeField.setText("CHUNK_SIZE_NOT_ENABLED");
        httpChunkSizeField.setEnabled(false);

        playlistReverseBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistReverseBox.setText("Download playlist in reverse order");

        playlistRandomBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playlistRandomBox.setText("Download playlist videos in random order");

        xattrSetFilesizeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xattrSetFilesizeBox.setText("Set file xattribute ytdl.filesize with expected file size");

        hlsSelectionGroup.add(hlsPreferNativeRButton);
        hlsPreferNativeRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hlsPreferNativeRButton.setText("Use the native HLS downloader instead of ffmpeg");
        hlsPreferNativeRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlsPreferNativeRButtonActionPerformed(evt);
            }
        });

        hlsSelectionGroup.add(hlsPreferFfmpegRButton);
        hlsPreferFfmpegRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hlsPreferFfmpegRButton.setText("Use ffmpeg instead of the native HLS downloader");
        hlsPreferFfmpegRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlsPreferFfmpegRButtonActionPerformed(evt);
            }
        });

        hlsSelectionResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hlsSelectionResetButton.setText("Reset Selection");
        hlsSelectionResetButton.setEnabled(false);
        hlsSelectionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlsSelectionResetButtonActionPerformed(evt);
            }
        });

        hlsUseMpegtsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hlsUseMpegtsBox.setText("Use the mpegts container for HLS downloader");
        hlsUseMpegtsBox.setToolTipText("This allows for some players to watch a video while it is being downloaded");

        externalDownloaderBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        externalDownloaderBox.setText("Use the specified external downloader");
        externalDownloaderBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                externalDownloaderBoxActionPerformed(evt);
            }
        });

        externalDownloaderField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        externalDownloaderField.setText("EXTERNAL_DOWNLOADER_NOT_ENABLED");
        externalDownloaderField.setEnabled(false);

        externalDownloaderArgsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        externalDownloaderArgsBox.setText("Give these external arguments to the external downloader");
        externalDownloaderArgsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                externalDownloaderArgsBoxActionPerformed(evt);
            }
        });

        externalDownloaderArgsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        externalDownloaderArgsField.setText("ARGS_NOT_ENABLED");
        externalDownloaderArgsField.setEnabled(false);

        resetDownloaderOptionsSettingsPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetDownloaderOptionsSettingsPage.setText("Reset All Page Settings");
        resetDownloaderOptionsSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDownloaderOptionsSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout downloadOptionsLayout = new javax.swing.GroupLayout(downloadOptions);
        downloadOptions.setLayout(downloadOptionsLayout);
        downloadOptionsLayout.setHorizontalGroup(
            downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keepFragmentsBox)
                    .addComponent(httpChunkSizeBox)
                    .addComponent(playlistReverseBox)
                    .addComponent(playlistRandomBox)
                    .addComponent(xattrSetFilesizeBox)
                    .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(hlsPreferFfmpegRButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hlsPreferNativeRButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(hlsSelectionResetButton)
                    .addComponent(hlsUseMpegtsBox)
                    .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(externalDownloaderArgsField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(externalDownloaderField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(noResizeBufferBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(downloadLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(limitRateBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skipUnavailableFragmentsBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(abortOnUnavailableFragmentBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, downloadOptionsLayout.createSequentialGroup()
                            .addComponent(bufferSizeBox)
                            .addGap(18, 18, 18)
                            .addComponent(bufferSizeField))
                        .addComponent(limitRateField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, downloadOptionsLayout.createSequentialGroup()
                            .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(retriesBox)
                                .addComponent(fragmentRetriesBox))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fragmentRetriesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(retriesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(httpChunkSizeField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(externalDownloaderBox)
                    .addComponent(externalDownloaderArgsBox)
                    .addComponent(resetDownloaderOptionsSettingsPage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        downloadOptionsLayout.setVerticalGroup(
            downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadLabel)
                .addGap(18, 18, 18)
                .addComponent(limitRateBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(limitRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retriesBox)
                    .addComponent(retriesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fragmentRetriesBox)
                    .addComponent(fragmentRetriesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(skipUnavailableFragmentsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(abortOnUnavailableFragmentBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keepFragmentsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downloadOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferSizeBox)
                    .addComponent(bufferSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noResizeBufferBox)
                .addGap(18, 18, 18)
                .addComponent(httpChunkSizeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(httpChunkSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playlistReverseBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playlistRandomBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(xattrSetFilesizeBox)
                .addGap(18, 18, 18)
                .addComponent(hlsPreferNativeRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hlsPreferFfmpegRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hlsSelectionResetButton)
                .addGap(18, 18, 18)
                .addComponent(hlsUseMpegtsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(externalDownloaderBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(externalDownloaderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(externalDownloaderArgsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(externalDownloaderArgsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resetDownloaderOptionsSettingsPage)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        downloadScroll.setViewportView(downloadOptions);

        commandOptionsTabs.addTab("Download", downloadScroll);

        filesystemScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        filesystemLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        filesystemLabel.setText("Filesystem Options");

        batchFileBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        batchFileBox.setText("File containing URL's to download");
        batchFileBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchFileBoxActionPerformed(evt);
            }
        });

        batchFileField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        batchFileField.setText("BATCH_FILE_NOT_ENABLED");
        batchFileField.setEnabled(false);

        batchFileSelectorButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        batchFileSelectorButton.setText("Select File");
        batchFileSelectorButton.setEnabled(false);
        batchFileSelectorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchFileSelectorButtonActionPerformed(evt);
            }
        });

        idBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        idBox.setText("Use only video ID in file name");

        outputBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outputBox.setText("Ouput filename template (see Youtube-DL documentation)");
        outputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBoxActionPerformed(evt);
            }
        });

        outputField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outputField.setText("OUTPUT_NOT_ENABLED");
        outputField.setEnabled(false);

        outputPlaceholderBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outputPlaceholderBox.setText("Placeholder for unavailable meta fields in output filename template");
        outputPlaceholderBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputPlaceholderBoxActionPerformed(evt);
            }
        });

        outputPlaceholderField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outputPlaceholderField.setText("PLACEHOLDER_NOT_ENABLED");
        outputPlaceholderField.setEnabled(false);
        outputPlaceholderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputPlaceholderFieldActionPerformed(evt);
            }
        });

        autoNumberStartBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        autoNumberStartBox.setText("Specify the start value for %(autonumber)s");
        autoNumberStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoNumberStartBoxActionPerformed(evt);
            }
        });

        autoNumberStartField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        autoNumberStartField.setText("START_VALUE_NOT_ENABLED");
        autoNumberStartField.setEnabled(false);

        restrictFilenamesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        restrictFilenamesBox.setText("Specify filename to only ASCII charcters (\"&\" and space are avoided)");

        noOverwritesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noOverwritesBox.setText("Do not overwrite files");
        noOverwritesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOverwritesBoxActionPerformed(evt);
            }
        });

        continueSelectionGroup.add(continueRButton);
        continueRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        continueRButton.setText("Force resume of partially downloaded files");
        continueRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueRButtonActionPerformed(evt);
            }
        });

        continueSelectionGroup.add(noContinueRButton);
        noContinueRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noContinueRButton.setText("Do not resume partially downloaded files (restard from begining)");
        noContinueRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noContinueRButtonActionPerformed(evt);
            }
        });

        resetContinueSelectionGroupButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetContinueSelectionGroupButton.setText("Reset Selection");
        resetContinueSelectionGroupButton.setEnabled(false);
        resetContinueSelectionGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetContinueSelectionGroupButtonActionPerformed(evt);
            }
        });

        noPartBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noPartBox.setText("Do not use .part files (write directly into output file)");

        noMTimeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noMTimeBox.setText("Do not use the last-modified header to set the file modification time");

        writeDescriptionBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeDescriptionBox.setText("Write video description to a .description file");

        writeInfoJsonBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeInfoJsonBox.setText("Write video metadata to a .info.json file");

        writeAnnotationsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeAnnotationsBox.setText("Write video annotations to a .annotations.xml file");

        loadInfoJsonBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadInfoJsonBox.setText("Load JSON file containing the video information");
        loadInfoJsonBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInfoJsonBoxActionPerformed(evt);
            }
        });

        loadInfoJsonField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadInfoJsonField.setText("FILE_NOT_ENABLED");
        loadInfoJsonField.setEnabled(false);

        loadJsonFileChooserButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadJsonFileChooserButton.setText("Select File");
        loadJsonFileChooserButton.setEnabled(false);
        loadJsonFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadJsonFileChooserButtonActionPerformed(evt);
            }
        });

        cookieBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cookieBox.setText("File to read cookies from and dump cookie jar in");
        cookieBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookieBoxActionPerformed(evt);
            }
        });

        cookieField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cookieField.setText("FILE_NOT_ENABLED");
        cookieField.setEnabled(false);

        loadCookieDirChooserButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadCookieDirChooserButton.setText("Select File");
        loadCookieDirChooserButton.setEnabled(false);
        loadCookieDirChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCookieDirChooserButtonActionPerformed(evt);
            }
        });

        cacheDirBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cacheDirBox.setText("Filesystem location where Youtube-DL can permantly store data");
        cacheDirBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheDirBoxActionPerformed(evt);
            }
        });

        cacheDirField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cacheDirField.setText("DIRECTORY_NOT_ENABLED");
        cacheDirField.setEnabled(false);
        cacheDirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheDirFieldActionPerformed(evt);
            }
        });

        loadCookieDirChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadCookieDirChooser.setText("Select Directory");
        loadCookieDirChooser.setEnabled(false);
        loadCookieDirChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCookieDirChooserActionPerformed(evt);
            }
        });

        noCacheDirBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noCacheDirBox.setText("Disable filesystem caching");
        noCacheDirBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCacheDirBoxActionPerformed(evt);
            }
        });

        rmCacheDirBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rmCacheDirBox.setText("Delete all filesystem cache files");

        resetFilesystemSettingsPageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetFilesystemSettingsPageButton.setText("Reset All Page Settings");
        resetFilesystemSettingsPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFilesystemSettingsPageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileSystemOptionsLayout = new javax.swing.GroupLayout(fileSystemOptions);
        fileSystemOptions.setLayout(fileSystemOptionsLayout);
        fileSystemOptionsLayout.setHorizontalGroup(
            fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSystemOptionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPlaceholderBox)
                    .addComponent(outputBox)
                    .addComponent(autoNumberStartBox)
                    .addComponent(filesystemLabel)
                    .addComponent(batchFileBox)
                    .addComponent(idBox)
                    .addComponent(restrictFilenamesBox)
                    .addComponent(noOverwritesBox)
                    .addComponent(continueRButton)
                    .addComponent(noContinueRButton)
                    .addComponent(resetContinueSelectionGroupButton)
                    .addComponent(noPartBox)
                    .addComponent(writeDescriptionBox)
                    .addComponent(writeInfoJsonBox)
                    .addComponent(writeAnnotationsBox)
                    .addComponent(loadInfoJsonBox)
                    .addComponent(noMTimeBox)
                    .addGroup(fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(outputPlaceholderField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(autoNumberStartField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                    .addGroup(fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(batchFileField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addComponent(outputField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(loadJsonFileChooserButton)
                    .addComponent(loadCookieDirChooserButton)
                    .addComponent(cookieBox)
                    .addGroup(fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cacheDirField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addComponent(cookieField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(loadInfoJsonField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(cacheDirBox)
                    .addComponent(loadCookieDirChooser)
                    .addComponent(noCacheDirBox)
                    .addComponent(rmCacheDirBox)
                    .addComponent(resetFilesystemSettingsPageButton)
                    .addComponent(batchFileSelectorButton)))
        );
        fileSystemOptionsLayout.setVerticalGroup(
            fileSystemOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSystemOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filesystemLabel)
                .addGap(18, 18, 18)
                .addComponent(batchFileBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(batchFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(batchFileSelectorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(idBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputPlaceholderBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPlaceholderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(autoNumberStartBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoNumberStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(restrictFilenamesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noOverwritesBox)
                .addGap(18, 18, 18)
                .addComponent(continueRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noContinueRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resetContinueSelectionGroupButton)
                .addGap(18, 18, 18)
                .addComponent(noPartBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noMTimeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeDescriptionBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeInfoJsonBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeAnnotationsBox)
                .addGap(18, 18, 18)
                .addComponent(loadInfoJsonBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadInfoJsonField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadJsonFileChooserButton)
                .addGap(18, 18, 18)
                .addComponent(cookieBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cookieField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadCookieDirChooserButton)
                .addGap(18, 18, 18)
                .addComponent(cacheDirBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cacheDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadCookieDirChooser)
                .addGap(18, 18, 18)
                .addComponent(noCacheDirBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rmCacheDirBox)
                .addGap(18, 18, 18)
                .addComponent(resetFilesystemSettingsPageButton)
                .addContainerGap())
        );

        filesystemScroll.setViewportView(fileSystemOptions);

        commandOptionsTabs.addTab("File System", filesystemScroll);

        ThumbnailScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        thumbnailLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        thumbnailLabel.setText("Thumbnail Options:");

        writeThumbnailBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeThumbnailBox.setText("Write thumbnail image to disk");
        writeThumbnailBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeThumbnailBoxActionPerformed(evt);
            }
        });

        writeAllThumbnailsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeAllThumbnailsBox.setText("Write all thumbnail image formats to disk");
        writeAllThumbnailsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeAllThumbnailsBoxActionPerformed(evt);
            }
        });

        listThumbnailsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        listThumbnailsBox.setText("Simulate and list all available thumbnail formats");

        resetThumnailSettingsPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetThumnailSettingsPage.setText("Reset All Page Settings");
        resetThumnailSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetThumnailSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout thumbnailOptionsLayout = new javax.swing.GroupLayout(thumbnailOptions);
        thumbnailOptions.setLayout(thumbnailOptionsLayout);
        thumbnailOptionsLayout.setHorizontalGroup(
            thumbnailOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thumbnailOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(thumbnailOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listThumbnailsBox)
                    .addComponent(thumbnailLabel)
                    .addComponent(writeThumbnailBox)
                    .addComponent(writeAllThumbnailsBox)
                    .addComponent(resetThumnailSettingsPage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        thumbnailOptionsLayout.setVerticalGroup(
            thumbnailOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thumbnailOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(thumbnailLabel)
                .addGap(18, 18, 18)
                .addComponent(writeThumbnailBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeAllThumbnailsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listThumbnailsBox)
                .addGap(18, 18, 18)
                .addComponent(resetThumnailSettingsPage)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        ThumbnailScroll.setViewportView(thumbnailOptions);

        commandOptionsTabs.addTab("Thumbnails", ThumbnailScroll);

        verbositySimulationScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        verbositySimulationPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        verbositySimulationLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        verbositySimulationLabel.setText("Verbosity & Simulation Options");

        quietBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        quietBox.setText("Activate quiet mode");

        noWarningsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noWarningsBox.setText("Ignore warnings");

        simulateBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        simulateBox.setText("Do not download the video and do not write anything do disk");

        skipDownloadBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        skipDownloadBox.setText("Do not download the video");

        getURLBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getURLBox.setText("Simulate, quiet but print URL");

        getTitleBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getTitleBox.setText("Simulate, quiet but print title");

        getIDBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getIDBox.setText("Simulate, quiet but print ID");

        getThumbnailBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getThumbnailBox.setText("Simulate, quiet but print thumbnail URL");

        getDescriptionBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getDescriptionBox.setText("Simulate, quiet but print video description");

        getDurationBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getDurationBox.setText("Simulate, quiet but print video length");

        getFilenameBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getFilenameBox.setText("Simulate, quiet but print output filename");

        getFormatBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getFormatBox.setText("Simulate, quiet but print output format");

        dumpJsonBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpJsonBox.setText("Simulate, quiet but print JSON information");
        dumpJsonBox.setToolTipText("See the \"OUTPUT TEMPLATE\" for a description of available keys.");

        dumpSingleJsonBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpSingleJsonBox.setText("Simulate, quiet but print JSON information for each");
        dumpSingleJsonBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dumpSingleJsonBoxActionPerformed(evt);
            }
        });

        dumpSingleJsonField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpSingleJsonField1.setText("command-line argument. If the URL refers to a");

        dumpSingleJsonField2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpSingleJsonField2.setText("playlist, dump the whole playlist info in a single line.");

        printJsonBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        printJsonBox.setText("Be quiet and print the video information as");

        printJsonLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        printJsonLabel.setText("JSON (video is still being downloaded)");

        newlineBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newlineBox.setText("Output progress bar as new lines");

        noProgressBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noProgressBox.setText("Do not print progress bar");

        consoleTitleBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        consoleTitleBox.setText("Display progress in console titlebar");

        verboseBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        verboseBox.setText("Print various debugging information");

        dumpPagesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpPagesBox.setText("Print downloaded pages encoded using");

        dumpPagesLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dumpPagesLabel.setText("base64 to debug problems (very verbose)");

        writePagesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writePagesBox.setText("Write downloaded intermediary pages to files");

        writePagesField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writePagesField.setText("in the current directory to debug problems");

        printTrafficBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        printTrafficBox.setText("Display sent and read HTTP traffic contact");

        callHomeSelectionGroup.add(callHomeRButton);
        callHomeRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        callHomeRButton.setText("Contact the youtube-dl server for debugging");
        callHomeRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callHomeRButtonActionPerformed(evt);
            }
        });

        callHomeSelectionGroup.add(noCallHomeRButton);
        noCallHomeRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noCallHomeRButton.setText("Do NOT contact the youtube-dl server for debugging");
        noCallHomeRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCallHomeRButtonActionPerformed(evt);
            }
        });

        callHomeSelectionResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        callHomeSelectionResetButton.setText("Reset Selection");
        callHomeSelectionResetButton.setEnabled(false);
        callHomeSelectionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callHomeSelectionResetButtonActionPerformed(evt);
            }
        });

        resetVerbositySimulationSettingsPageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetVerbositySimulationSettingsPageButton.setText("Reset All Page Settings");
        resetVerbositySimulationSettingsPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetVerbositySimulationSettingsPageButtonActionPerformed(evt);
            }
        });

        printTrafficField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        printTrafficField.setText("the youtube-dl server for debugging");

        javax.swing.GroupLayout verbositySimulationPanelLayout = new javax.swing.GroupLayout(verbositySimulationPanel);
        verbositySimulationPanel.setLayout(verbositySimulationPanelLayout);
        verbositySimulationPanelLayout.setHorizontalGroup(
            verbositySimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verbositySimulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(verbositySimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(verbositySimulationLabel)
                    .addComponent(quietBox)
                    .addComponent(noWarningsBox)
                    .addComponent(simulateBox)
                    .addComponent(skipDownloadBox)
                    .addComponent(getURLBox)
                    .addComponent(getTitleBox)
                    .addComponent(getIDBox)
                    .addComponent(getThumbnailBox)
                    .addComponent(getDescriptionBox)
                    .addComponent(getDurationBox)
                    .addComponent(getFilenameBox)
                    .addComponent(getFormatBox)
                    .addComponent(dumpJsonBox)
                    .addComponent(writePagesBox)
                    .addComponent(callHomeRButton)
                    .addComponent(noCallHomeRButton)
                    .addComponent(callHomeSelectionResetButton)
                    .addComponent(resetVerbositySimulationSettingsPageButton)
                    .addComponent(printJsonBox)
                    .addComponent(newlineBox)
                    .addComponent(noProgressBox)
                    .addComponent(consoleTitleBox)
                    .addComponent(verboseBox)
                    .addComponent(dumpPagesBox)
                    .addComponent(dumpSingleJsonBox)
                    .addComponent(printTrafficBox)
                    .addGroup(verbositySimulationPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(verbositySimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(printTrafficField)
                            .addComponent(writePagesField)
                            .addComponent(dumpPagesLabel)
                            .addComponent(printJsonLabel)
                            .addComponent(dumpSingleJsonField1)
                            .addComponent(dumpSingleJsonField2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        verbositySimulationPanelLayout.setVerticalGroup(
            verbositySimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verbositySimulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verbositySimulationLabel)
                .addGap(18, 18, 18)
                .addComponent(quietBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noWarningsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(simulateBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(skipDownloadBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getURLBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getTitleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getIDBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getThumbnailBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getDescriptionBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getDurationBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getFilenameBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getFormatBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dumpJsonBox)
                .addGap(18, 18, 18)
                .addComponent(dumpSingleJsonBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dumpSingleJsonField1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dumpSingleJsonField2)
                .addGap(18, 18, 18)
                .addComponent(printJsonBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printJsonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newlineBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noProgressBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consoleTitleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(verboseBox)
                .addGap(18, 18, 18)
                .addComponent(dumpPagesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dumpPagesLabel)
                .addGap(18, 18, 18)
                .addComponent(writePagesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writePagesField)
                .addGap(18, 18, 18)
                .addComponent(printTrafficBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printTrafficField)
                .addGap(18, 18, 18)
                .addComponent(callHomeRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noCallHomeRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(callHomeSelectionResetButton)
                .addGap(18, 18, 18)
                .addComponent(resetVerbositySimulationSettingsPageButton)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        verbositySimulationScroll.setViewportView(verbositySimulationPanel);

        commandOptionsTabs.addTab("Verbosity & Simulation", verbositySimulationScroll);

        workaroundsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        workaroundPanel.setToolTipText("Requires bidiv or fribidi executable in PATH");

        workaroundsLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        workaroundsLabel.setText("Workarounds Options");

        encodingBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        encodingBox.setText("Force the specified encoding (experimental)");
        encodingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodingBoxActionPerformed(evt);
            }
        });

        encodingField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        encodingField.setText("ENCODING_NOT_ENABLED");
        encodingField.setEnabled(false);
        encodingField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodingFieldActionPerformed(evt);
            }
        });

        noCheckCertificateBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noCheckCertificateBox.setText("Suppress HTTPS certification validation");
        noCheckCertificateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCheckCertificateBoxActionPerformed(evt);
            }
        });

        preferInsecureBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        preferInsecureBox.setText("Use an unencrypted connection to retrieve information");
        preferInsecureBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferInsecureBoxActionPerformed(evt);
            }
        });

        preferInsecureLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        preferInsecureLabel.setText("about the video (YouTube only)");

        userAgentBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userAgentBox.setText("Specify a custom user agent");
        userAgentBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAgentBoxActionPerformed(evt);
            }
        });

        userAgentField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userAgentField.setText("USER_AGENT_NOT_ENABLED");
        userAgentField.setEnabled(false);

        refererBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refererBox.setText("Specify a custom referer, use if the video access");
        refererBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refererBoxActionPerformed(evt);
            }
        });

        refererLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refererLabel.setText("is restricted to one domain");

        refererField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refererField.setText("REFERER_URL_NOT_ENABLED");
        refererField.setEnabled(false);
        refererField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refererFieldActionPerformed(evt);
            }
        });

        addHeaderBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addHeaderBox.setText("Specify a custom HTTP header and its value, ");
        addHeaderBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHeaderBoxActionPerformed(evt);
            }
        });

        addHeaderLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addHeaderLabel1.setText("multiple headers can be listed and added");

        headerField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        headerField.setText("FIELD");
        headerField.setEnabled(false);
        headerField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                headerFieldCaretUpdate(evt);
            }
        });
        headerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerFieldActionPerformed(evt);
            }
        });

        valueField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        valueField.setText("VALUE");
        valueField.setEnabled(false);
        valueField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                valueFieldCaretUpdate(evt);
            }
        });
        valueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueFieldActionPerformed(evt);
            }
        });

        headerList.setEnabled(false);
        headerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                headerListMouseClicked(evt);
            }
        });
        headerListScroll.setViewportView(headerList);

        addHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addHeaderLabel.setText("Header to add: (FIELD:VALUE)");

        deleteHeaderButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deleteHeaderButton.setText("Delete Entry");
        deleteHeaderButton.setEnabled(false);
        deleteHeaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHeaderButtonActionPerformed(evt);
            }
        });

        clearHeaderListButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clearHeaderListButton.setText("Delete List");
        clearHeaderListButton.setEnabled(false);
        clearHeaderListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHeaderListButtonActionPerformed(evt);
            }
        });

        addHeaderButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addHeaderButton.setText("Add Header Entry");
        addHeaderButton.setEnabled(false);
        addHeaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHeaderButtonActionPerformed(evt);
            }
        });

        bidiWorkaroundBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bidiWorkaroundBox.setText("Use this option to work around terminals that lack ");
        bidiWorkaroundBox.setToolTipText("");

        bidiWorkaroundLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bidiWorkaroundLabel.setText("bidirectional text support");

        sleepIntervalBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sleepIntervalBox.setText("Number of seconds to sleep before each download");
        sleepIntervalBox.setToolTipText("This creates a randomized interval when used with a upper bound.");
        sleepIntervalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sleepIntervalBoxActionPerformed(evt);
            }
        });

        sleepIntervalSecondsSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sleepIntervalSecondsSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sleepIntervalSecondsSpinner.setEnabled(false);

        maxSleepIntervalBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxSleepIntervalBox.setText("Upper bound of a range for randomized sleep before each download");
        maxSleepIntervalBox.setToolTipText("This creates a randomized interval when used with a lower bound.");
        maxSleepIntervalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxSleepIntervalBoxActionPerformed(evt);
            }
        });

        maxSleepIntervalSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maxSleepIntervalSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        maxSleepIntervalSpinner.setEnabled(false);

        resetWorkaroundSettingsPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetWorkaroundSettingsPage.setText("Reset All Page Settings");
        resetWorkaroundSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetWorkaroundSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout workaroundPanelLayout = new javax.swing.GroupLayout(workaroundPanel);
        workaroundPanel.setLayout(workaroundPanelLayout);
        workaroundPanelLayout.setHorizontalGroup(
            workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workaroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(workaroundsLabel)
                        .addComponent(encodingBox)
                        .addComponent(noCheckCertificateBox)
                        .addComponent(userAgentBox)
                        .addComponent(refererField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addComponent(userAgentField)
                        .addComponent(encodingField))
                    .addComponent(addHeaderLabel)
                    .addGroup(workaroundPanelLayout.createSequentialGroup()
                        .addComponent(headerListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(workaroundPanelLayout.createSequentialGroup()
                                .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(deleteHeaderButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(headerField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clearHeaderListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(addHeaderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(maxSleepIntervalSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sleepIntervalSecondsSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                    .addComponent(maxSleepIntervalBox)
                    .addComponent(resetWorkaroundSettingsPage)
                    .addComponent(refererBox)
                    .addComponent(sleepIntervalBox)
                    .addComponent(bidiWorkaroundBox)
                    .addGroup(workaroundPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bidiWorkaroundLabel)
                            .addComponent(refererLabel)
                            .addComponent(preferInsecureLabel)
                            .addComponent(addHeaderLabel1)))
                    .addComponent(addHeaderBox)
                    .addComponent(preferInsecureBox))
                .addContainerGap(1392, Short.MAX_VALUE))
        );
        workaroundPanelLayout.setVerticalGroup(
            workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workaroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workaroundsLabel)
                .addGap(18, 18, 18)
                .addComponent(encodingBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encodingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(noCheckCertificateBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preferInsecureBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preferInsecureLabel)
                .addGap(18, 18, 18)
                .addComponent(userAgentBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userAgentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(refererBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refererLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refererField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addHeaderBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addHeaderLabel1)
                .addGap(18, 18, 18)
                .addComponent(addHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(workaroundPanelLayout.createSequentialGroup()
                        .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(valueField)
                            .addComponent(headerField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(workaroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteHeaderButton)
                            .addComponent(clearHeaderListButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addHeaderButton))
                    .addComponent(headerListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bidiWorkaroundBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bidiWorkaroundLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sleepIntervalBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sleepIntervalSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxSleepIntervalBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxSleepIntervalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resetWorkaroundSettingsPage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        workaroundsScroll.setViewportView(workaroundPanel);

        commandOptionsTabs.addTab("Workarounds", workaroundsScroll);

        videoFormatScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        videoFormatLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        videoFormatLabel.setText("Video Format Options:");

        videoFormatCodeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        videoFormatCodeBox.setText("Set Video Format Code");
        videoFormatCodeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoFormatCodeBoxActionPerformed(evt);
            }
        });

        videoFormatField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        videoFormatField.setText("VIDEO_FORMAT_CODE_NOT_ENABLED");
        videoFormatField.setEnabled(false);
        videoFormatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoFormatFieldActionPerformed(evt);
            }
        });

        allFormatsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        allFormatsBox.setText("Download all available video formats");
        allFormatsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allFormatsBoxActionPerformed(evt);
            }
        });

        preferFreeFormatsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        preferFreeFormatsBox.setText("Prefer free video formats unless a specific one if requested");

        listFormatsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        listFormatsBox.setText("List all available formats of requiested videos");
        listFormatsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFormatsBoxActionPerformed(evt);
            }
        });

        youTubeSkipDashBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        youTubeSkipDashBox.setText("Do not download the DASH manifests/data from YouTube videos");
        youTubeSkipDashBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                youTubeSkipDashBoxActionPerformed(evt);
            }
        });

        mergeOutputFormatBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mergeOutputFormatBox.setText("If a merge is required, output to given container format");
        mergeOutputFormatBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeOutputFormatBoxActionPerformed(evt);
            }
        });

        resetVideoFormatSettingsPage.setText("Reset All Page Settings");
        resetVideoFormatSettingsPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetVideoFormatSettingsPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout videoFormatOptionsLayout = new javax.swing.GroupLayout(videoFormatOptions);
        videoFormatOptions.setLayout(videoFormatOptionsLayout);
        videoFormatOptionsLayout.setHorizontalGroup(
            videoFormatOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoFormatOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(videoFormatOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(videoFormatLabel)
                    .addComponent(videoFormatField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(videoFormatCodeBox)
                    .addComponent(allFormatsBox)
                    .addComponent(preferFreeFormatsBox)
                    .addComponent(listFormatsBox)
                    .addComponent(youTubeSkipDashBox)
                    .addComponent(mergeOutputFormatBox)
                    .addComponent(resetVideoFormatSettingsPage))
                .addContainerGap(1408, Short.MAX_VALUE))
        );
        videoFormatOptionsLayout.setVerticalGroup(
            videoFormatOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoFormatOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(videoFormatLabel)
                .addGap(18, 18, 18)
                .addComponent(videoFormatCodeBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(videoFormatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allFormatsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preferFreeFormatsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listFormatsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(youTubeSkipDashBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mergeOutputFormatBox)
                .addGap(18, 18, 18)
                .addComponent(resetVideoFormatSettingsPage)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        videoFormatScroll.setViewportView(videoFormatOptions);

        commandOptionsTabs.addTab("Video Format", videoFormatScroll);

        subtitleScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        subtitleLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        subtitleLabel.setText("Subtitle Options:");

        writeSubBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeSubBox.setText("Write subtitle file");

        writeAutoSubBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        writeAutoSubBox.setText("Write automatically generated subtitle file (YouTube Only)");

        allSubsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        allSubsBox.setText("Download all the available subtitles of the video");
        allSubsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allSubsBoxActionPerformed(evt);
            }
        });

        listSubsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        listSubsBox.setText("List all avaible subtitles for the video");

        subFormatBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subFormatBox.setText("Subtitle format (example: \"srt\" or \"ass/srt/best\")");
        subFormatBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subFormatBoxActionPerformed(evt);
            }
        });

        subFormatField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subFormatField.setText("SUB_FORMAT_NOT_ENABLED");
        subFormatField.setEnabled(false);

        subLangBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subLangBox.setText("Languages of the subtitles to download");
        subLangBox.setToolTipText("(optional: separated by commas)");
        subLangBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subLangBoxActionPerformed(evt);
            }
        });

        subLangField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subLangField.setText("SUB_LANG_NOT_ENABLED");
        subLangField.setEnabled(false);

        subtitleSettingsPageReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subtitleSettingsPageReset.setText("Reset All Page Settings");
        subtitleSettingsPageReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtitleSettingsPageResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subtitleOptionsLayout = new javax.swing.GroupLayout(subtitleOptions);
        subtitleOptions.setLayout(subtitleOptionsLayout);
        subtitleOptionsLayout.setHorizontalGroup(
            subtitleOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtitleOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subtitleOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subtitleOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(subtitleLabel)
                        .addComponent(writeSubBox)
                        .addComponent(writeAutoSubBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(allSubsBox)
                        .addComponent(subFormatBox)
                        .addComponent(subFormatField)
                        .addComponent(subtitleSettingsPageReset)
                        .addComponent(subLangField))
                    .addComponent(subLangBox)
                    .addComponent(listSubsBox))
                .addContainerGap(1448, Short.MAX_VALUE))
        );
        subtitleOptionsLayout.setVerticalGroup(
            subtitleOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtitleOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subtitleLabel)
                .addGap(18, 18, 18)
                .addComponent(writeSubBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(writeAutoSubBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allSubsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listSubsBox)
                .addGap(18, 18, 18)
                .addComponent(subFormatBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subFormatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subLangBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subLangField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(subtitleSettingsPageReset)
                .addGap(24, 24, 24))
        );

        subtitleScroll.setViewportView(subtitleOptions);

        commandOptionsTabs.addTab("Subtitles", subtitleScroll);

        authenticationScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        authenticationLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        authenticationLabel.setText("Authentication Options:");

        userNameBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userNameBox.setText("Login with this account ID");
        userNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameBoxActionPerformed(evt);
            }
        });

        userNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userNameField.setText("USERNAME_NOT_ENABLED");
        userNameField.setEnabled(false);

        passwordBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passwordBox.setText("Account Password");
        passwordBox.setToolTipText("If not selected, Youtube-DL will ask for it interactively");
        passwordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordBoxActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passwordField.setText("PASSWORD_NOT_ENABLED");
        passwordField.setEchoChar((char)0);
        passwordField.setEnabled(false);

        showPasswordBox.setText("Show Password");
        showPasswordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordBoxActionPerformed(evt);
            }
        });

        twoFactorBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        twoFactorBox.setText("Two-Factor Authetication Code");
        twoFactorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoFactorBoxActionPerformed(evt);
            }
        });

        twoFactorField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        twoFactorField.setText("2FA_NOT_ENABLED");
        twoFactorField.setEnabled(false);
        twoFactorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoFactorFieldActionPerformed(evt);
            }
        });

        netrcBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        netrcBox.setText("Use .netrc authentication data");
        netrcBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netrcBoxActionPerformed(evt);
            }
        });

        videoPasswordBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        videoPasswordBox.setText("Video Password (Vimeo, youku)");
        videoPasswordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoPasswordBoxActionPerformed(evt);
            }
        });

        videoPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        videoPasswordField.setText("VIDEO_PASSWORD_NOT_ENABLED");
        videoPasswordField.setEnabled(false);

        authenticationSettingsPageResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        authenticationSettingsPageResetButton.setText("Reset All Page Settings");
        authenticationSettingsPageResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authenticationSettingsPageResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout authenticationOptionsLayout = new javax.swing.GroupLayout(authenticationOptions);
        authenticationOptions.setLayout(authenticationOptionsLayout);
        authenticationOptionsLayout.setHorizontalGroup(
            authenticationOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authenticationOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(authenticationOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(authenticationLabel)
                    .addComponent(userNameBox)
                    .addComponent(passwordBox)
                    .addComponent(twoFactorBox)
                    .addComponent(netrcBox)
                    .addComponent(videoPasswordBox)
                    .addGroup(authenticationOptionsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(showPasswordBox))
                    .addComponent(authenticationSettingsPageResetButton)
                    .addComponent(userNameField)
                    .addComponent(passwordField)
                    .addComponent(twoFactorField)
                    .addComponent(videoPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        authenticationOptionsLayout.setVerticalGroup(
            authenticationOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authenticationOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(authenticationLabel)
                .addGap(18, 18, 18)
                .addComponent(userNameBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwordBox)
                .addGap(3, 3, 3)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showPasswordBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(twoFactorBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(twoFactorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(netrcBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(videoPasswordBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(videoPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(authenticationSettingsPageResetButton)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        authenticationScroll.setViewportView(authenticationOptions);

        commandOptionsTabs.addTab("Authentication", authenticationScroll);

        adobePassScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        adobePassLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        adobePassLabel.setText("Adobe Pass Options");

        adobePassMSOBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobePassMSOBox.setText("Adobe pass multiple-system operator identifier");
        adobePassMSOBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobePassMSOBoxActionPerformed(evt);
            }
        });

        adobeMSOField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobeMSOField.setText("ADOBE_MSO_ID_NOT_ENABLED");
        adobeMSOField.setEnabled(false);
        adobeMSOField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobeMSOFieldActionPerformed(evt);
            }
        });

        adobePassAccountBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobePassAccountBox.setText("Adobe Pass Account");
        adobePassAccountBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobePassAccountBoxActionPerformed(evt);
            }
        });

        adobeUserNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobeUserNameField.setText("ADOBE_USER_NAME_NOT_ENABLED");
        adobeUserNameField.setEnabled(false);
        adobeUserNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobeUserNameFieldActionPerformed(evt);
            }
        });

        adobePasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobePasswordField.setText("ADOBE_PASSWORD_NOT_ENABLED");
        adobePasswordField.setEchoChar((char)0);
        adobePasswordField.setEnabled(false);

        adobeShowPasswordBox.setText("show password");
        adobeShowPasswordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobeShowPasswordBoxActionPerformed(evt);
            }
        });

        apListMSOBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        apListMSOBox.setText("List all supported mutiple-system operators");

        adobePassSettingsPageReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        adobePassSettingsPageReset.setText("Reset All Page Settings");
        adobePassSettingsPageReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobePassSettingsPageResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adobePassOptionsLayout = new javax.swing.GroupLayout(adobePassOptions);
        adobePassOptions.setLayout(adobePassOptionsLayout);
        adobePassOptionsLayout.setHorizontalGroup(
            adobePassOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adobePassOptionsLayout.createSequentialGroup()
                .addGroup(adobePassOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adobePassOptionsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(adobeShowPasswordBox))
                    .addGroup(adobePassOptionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(adobePassOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(apListMSOBox)
                            .addGroup(adobePassOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(adobePassLabel)
                                .addComponent(adobePassMSOBox)
                                .addComponent(adobeMSOField)
                                .addComponent(adobePassAccountBox)
                                .addComponent(adobeUserNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                                .addComponent(adobePasswordField))))
                    .addGroup(adobePassOptionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(adobePassSettingsPageReset)))
                .addContainerGap(1478, Short.MAX_VALUE))
        );
        adobePassOptionsLayout.setVerticalGroup(
            adobePassOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adobePassOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adobePassLabel)
                .addGap(18, 18, 18)
                .addComponent(adobePassMSOBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adobeMSOField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adobePassAccountBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adobeUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adobePasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adobeShowPasswordBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(apListMSOBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adobePassSettingsPageReset)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        adobePassScroll.setViewportView(adobePassOptions);

        commandOptionsTabs.addTab("Adobe Pass", adobePassScroll);

        postProcessingScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        postProcessingLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        postProcessingLabel.setText("Post-Processing Options");

        extractAudioBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        extractAudioBox.setText("Convert video files to audio-only files");

        extractAudioLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        extractAudioLabel.setText("(requires ffmpeg/avconv and ffprobe/avprobe)");

        audioFormatBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioFormatBox.setText("Specify audio format:");
        audioFormatBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioFormatBoxActionPerformed(evt);
            }
        });

        audioFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "best", "acc", "flac", "mp3", "m4a", "opus", "vorbis", "wav" }));
        audioFormatComboBox.setEnabled(false);
        audioFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioFormatComboBoxActionPerformed(evt);
            }
        });

        audioQualityBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioQualityBox.setText("Specify ffmpeg/avconv audio quality, insert a value");
        audioQualityBox.setToolTipText("For VBR or a specific bitrate like 128K (default 5)");
        audioQualityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioQualityBoxActionPerformed(evt);
            }
        });

        audioQualityLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioQualityLabel.setText("between 0 (better) and 9 (worse)");

        audioQualityValueSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioQualityValueSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 0, 9, 1));
        audioQualityValueSpinner.setEnabled(false);

        recodeVideoBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        recodeVideoBox.setText("Encode the video to another format if necessary: ");
        recodeVideoBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recodeVideoBoxActionPerformed(evt);
            }
        });

        recodeVideoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mp4", "flv", "ogg", "webm", "mkv", "avi" }));
        recodeVideoComboBox.setEnabled(false);

        postProcessorArgsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        postProcessorArgsBox.setText("Give these arguments to the postprocessor");
        postProcessorArgsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postProcessorArgsBoxActionPerformed(evt);
            }
        });

        postProcessorArgsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        postProcessorArgsField.setText("ARGS_NOT_ENABLED");
        postProcessorArgsField.setEnabled(false);

        keepVideoBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        keepVideoBox.setText("Keep the video file on disk after the post-processing;");

        keepVideoLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        keepVideoLabel.setText("the video is erased by default");

        noPostOverwritesBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noPostOverwritesBox.setText("Do NOT overwrite post-processing files");
        noPostOverwritesBox.setToolTipText("by default: post processed files are overwrittend");

        embedSubBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        embedSubBox.setText("Embed subtitles in the video");

        embedSubLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        embedSubLabel.setText("(only for mp4, webm, and mkv videos)");

        embedThumbnailBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        embedThumbnailBox.setText("Embed thumbnail in the audio as cover art");

        addMetaDataBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addMetaDataBox.setText("Write metadata to the video file");
        addMetaDataBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMetaDataBoxActionPerformed(evt);
            }
        });

        metaDataFromTitleBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        metaDataFromTitleBox.setText("Parse additional metadata like song title/artist from");
        metaDataFromTitleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataFromTitleBoxActionPerformed(evt);
            }
        });

        metaDataFromTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        metaDataFromTitleLabel.setText("the video title");

        metaDataFromTitleField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        metaDataFromTitleField.setText("FORMAT_NOT_ENABLED");
        metaDataFromTitleField.setEnabled(false);
        metaDataFromTitleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataFromTitleFieldActionPerformed(evt);
            }
        });

        xattrsBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xattrsBox.setText("Write metadata to the video file's xattrs");
        xattrsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xattrsBoxActionPerformed(evt);
            }
        });

        xattrsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        xattrsLabel.setText("(using dublin core and xdg standards)");

        fixUpBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fixUpBox.setText("Automatically correct known faults of the file.");
        fixUpBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixUpBoxActionPerformed(evt);
            }
        });

        fixUpLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fixUpLabel.setText("one of never (do nothing) warn (only warn)");

        fixUpField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fixUpField.setText("POLICY_NOT_ENABLED");
        fixUpField.setEnabled(false);

        postProcessorGroup.add(preferAvconvRButton);
        preferAvconvRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        preferAvconvRButton.setText("Prefer avconv over ffmpeg for running the postprocessesors");
        preferAvconvRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferAvconvRButtonActionPerformed(evt);
            }
        });

        postProcessorGroup.add(preferFfmpegRButton);
        preferFfmpegRButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        preferFfmpegRButton.setText("Prefer ffmpeg over avconv for running the postprocessors (default)");
        preferFfmpegRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferFfmpegRButtonActionPerformed(evt);
            }
        });

        postProcessorSettingResetButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        postProcessorSettingResetButton.setText("Reset Selection");
        postProcessorSettingResetButton.setEnabled(false);
        postProcessorSettingResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postProcessorSettingResetButtonActionPerformed(evt);
            }
        });

        ffmpegLocationPathBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ffmpegLocationPathBox.setText("Location of the ffmpeg/avconv binary; either the direct");
        ffmpegLocationPathBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffmpegLocationPathBoxActionPerformed(evt);
            }
        });

        ffmpegLocationPathLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ffmpegLocationPathLabel.setText(" with or directory");

        ffmpegLocationField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ffmpegLocationField.setText("PATH_NOT_ENABLED");
        ffmpegLocationField.setEnabled(false);

        ffmpegDirChooserButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ffmpegDirChooserButton.setText("Select Path or File");
        ffmpegDirChooserButton.setEnabled(false);
        ffmpegDirChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffmpegDirChooserButtonActionPerformed(evt);
            }
        });

        execBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        execBox.setText("Execute a command on the file after downloading");
        execBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execBoxActionPerformed(evt);
            }
        });

        execField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        execField.setText("CMD_NOT_ENABLED");
        execField.setEnabled(false);

        convertSubBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        convertSubBox.setText("Convert the subtitles to another format:");
        convertSubBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertSubBoxActionPerformed(evt);
            }
        });

        convertSubComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        convertSubComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "srt", "ass", "vtt", "lrc" }));
        convertSubComboBox.setEnabled(false);

        resetWorkaroundsSettingsPageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetWorkaroundsSettingsPageButton.setText("Reset All Page Settings");
        resetWorkaroundsSettingsPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetWorkaroundsSettingsPageButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("and post-processing");

        javax.swing.GroupLayout postProcessingPanelLayout = new javax.swing.GroupLayout(postProcessingPanel);
        postProcessingPanel.setLayout(postProcessingPanelLayout);
        postProcessingPanelLayout.setHorizontalGroup(
            postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postProcessingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fixUpBox)
                    .addComponent(noPostOverwritesBox)
                    .addComponent(postProcessingLabel)
                    .addComponent(extractAudioBox)
                    .addComponent(postProcessorArgsBox)
                    .addComponent(keepVideoBox)
                    .addComponent(embedSubBox)
                    .addComponent(addMetaDataBox)
                    .addComponent(metaDataFromTitleBox)
                    .addComponent(metaDataFromTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xattrsBox)
                    .addComponent(preferAvconvRButton)
                    .addComponent(preferFfmpegRButton)
                    .addComponent(postProcessorSettingResetButton)
                    .addComponent(ffmpegLocationPathBox)
                    .addComponent(fixUpField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ffmpegLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ffmpegDirChooserButton)
                    .addComponent(execBox)
                    .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, postProcessingPanelLayout.createSequentialGroup()
                            .addComponent(convertSubBox)
                            .addGap(18, 18, 18)
                            .addComponent(convertSubComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(execField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resetWorkaroundsSettingsPageButton)
                    .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(postProcessingPanelLayout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(audioQualityValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(audioQualityLabel)))
                        .addComponent(audioQualityBox)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, postProcessingPanelLayout.createSequentialGroup()
                            .addComponent(recodeVideoBox)
                            .addGap(4, 4, 4)))
                    .addComponent(recodeVideoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(postProcessingPanelLayout.createSequentialGroup()
                        .addComponent(audioFormatBox)
                        .addGap(64, 64, 64)
                        .addComponent(audioFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(postProcessorArgsField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(embedThumbnailBox)
                    .addGroup(postProcessingPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(ffmpegLocationPathLabel)
                            .addComponent(fixUpLabel)
                            .addComponent(xattrsLabel)
                            .addComponent(metaDataFromTitleLabel)
                            .addComponent(embedSubLabel)
                            .addComponent(keepVideoLabel)
                            .addComponent(extractAudioLabel))))
                .addContainerGap(1396, Short.MAX_VALUE))
        );
        postProcessingPanelLayout.setVerticalGroup(
            postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postProcessingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(postProcessingLabel)
                .addGap(18, 18, 18)
                .addComponent(extractAudioBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extractAudioLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(audioFormatBox)
                    .addComponent(audioFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(audioQualityBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(audioQualityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(audioQualityValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(recodeVideoBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recodeVideoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(postProcessorArgsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(postProcessorArgsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(keepVideoBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keepVideoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noPostOverwritesBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(embedSubBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(embedSubLabel)
                .addGap(18, 18, 18)
                .addComponent(embedThumbnailBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addMetaDataBox)
                .addGap(18, 18, 18)
                .addComponent(metaDataFromTitleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metaDataFromTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metaDataFromTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(xattrsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(xattrsLabel)
                .addGap(21, 21, 21)
                .addComponent(fixUpBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fixUpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fixUpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(preferAvconvRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preferFfmpegRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(postProcessorSettingResetButton)
                .addGap(21, 21, 21)
                .addComponent(ffmpegLocationPathBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ffmpegLocationPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ffmpegLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ffmpegDirChooserButton)
                .addGap(18, 18, 18)
                .addComponent(execBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(execField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(postProcessingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertSubBox)
                    .addComponent(convertSubComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(resetWorkaroundsSettingsPageButton)
                .addContainerGap())
        );

        postProcessingScroll.setViewportView(postProcessingPanel);

        commandOptionsTabs.addTab("Post-Processing", postProcessingScroll);

        logScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        log.setEditable(false);
        log.setColumns(20);
        log.setLineWrap(true);
        log.setRows(5);
        log.setEnabled(false);
        logScroll.setViewportView(log);

        settingsHeader.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        settingsHeader.setText("Command Inputs & Parameters:");

        outputsHeader.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        outputsHeader.setText("Outputs:");

        output.setEditable(false);
        output.setColumns(20);
        output.setLineWrap(true);
        output.setRows(5);
        output.setEnabled(false);
        outputScroll.setViewportView(output);

        logLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        logLabel.setText("Compilation Log");

        outputLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        outputLabel.setText("Generated Command");

        copyLogToClipboardButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        copyLogToClipboardButton.setText("Copy to Clipboard");
        copyLogToClipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyLogToClipboardButtonActionPerformed(evt);
            }
        });

        copyOutputToClipboardButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        copyOutputToClipboardButton.setText("Copy to Clipboard");

        resetAllSettingsAndData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        resetAllSettingsAndData.setText("Reset All Settings");
        resetAllSettingsAndData.setToolTipText("Reset all settings, parameters, logs, and outputs from this instance");
        resetAllSettingsAndData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllSettingsAndDataActionPerformed(evt);
            }
        });

        editorModeBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editorModeBox.setText("Command Editor Mode");

        generateCommandsButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateCommandsButton.setText("Generate Command");
        generateCommandsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCommandsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsHeader)
                    .addComponent(commandOptionsTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputsHeader)
                    .addComponent(logLabel)
                    .addComponent(outputLabel)
                    .addComponent(copyLogToClipboardButton)
                    .addComponent(logScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyOutputToClipboardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetAllSettingsAndData))
                    .addComponent(outputScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(editorModeBox)
                    .addComponent(generateCommandsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsHeader)
                    .addComponent(outputsHeader))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyLogToClipboardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copyOutputToClipboardButton)
                            .addComponent(resetAllSettingsAndData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editorModeBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateCommandsButton))
                    .addComponent(commandOptionsTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void writeThumbnailBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void writeAllThumbnailsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void resetThumnailSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        //reset all settings on thumbnail options page
        writeThumbnailBox.setSelected(false);
        writeAllThumbnailsBox.setSelected(false);
        listThumbnailsBox.setSelected(false);
    }                                                         

    private void configLocationFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void configLocationBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        //disable or enable config location field
        if(configLocationBox.isSelected()) {
            configLocationField.setEnabled(true);
            configDirChooserButton.setEnabled(true);
            configLocationField.setText("");
        }
        else {
            configLocationField.setEnabled(false);
            configDirChooserButton.setEnabled(false);
            configLocationField.setText("CONFIG_LOCATION_NOT_ENABLED");
        }
    }                                                 

    private void ignoreConfigBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void searchPrefixFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void defaultSearchBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        //disable or enable default search field
        if(defaultSearchBox.isSelected()) {
            searchPrefixField.setEnabled(true);
            searchPrefixField.setText("");
        }
        else {
            searchPrefixField.setEnabled(false);
            searchPrefixField.setText("DEFAULT_SEARCH_NOT_ENABLED");
        }
    }                                                

    private void dumpUserAgentBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void ignoreErrorsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void singleCommandResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        //reset the current selection of the single command button group
        singleCommandGroup.clearSelection();
        singleCommandResetButton.setEnabled(false);
        singleAppCommandsDisableAllFunctions(false);        
    }                                                        

    private void updateRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        singleCommandResetButton.setEnabled(true);
        singleAppCommandsDisableAllFunctions(true);
    }                                             

    private void versionRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        singleCommandResetButton.setEnabled(true);
        singleAppCommandsDisableAllFunctions(true);
    }                                              

    private void helpRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        singleCommandResetButton.setEnabled(true);
        singleAppCommandsDisableAllFunctions(true);
    }                                           

    //disable all other function in the general page and all other tabs
    private void singleAppCommandsDisableAllFunctions(boolean isInUse) {
        //enable or disable all other tabs while in use
        for(int i = 0; i < commandOptionsTabs.getTabCount(); i++) {
            if(i != 1) {
                commandOptionsTabs.setEnabledAt(i, !isInUse);
            }
        }
        //clear the rest of the general settings page (everything below single application commands)
        ignoreErrorsBox.setEnabled(!isInUse);
        abortOnErrorBox.setEnabled(!isInUse);
        dumpUserAgentBox.setEnabled(!isInUse);
        extractorDescriptionsBox.setEnabled(!isInUse);
        listExtractorsBox.setEnabled(!isInUse);
        extractorDescriptionsBox.setEnabled(!isInUse);
        forceGenericExtractorsBox.setEnabled(!isInUse);
        defaultSearchBox.setEnabled(!isInUse);
        //disable field if the single application commands are in use
        if(isInUse) {
            searchPrefixField.setEnabled(!isInUse);            
        }
        else {
            //if reset: enable the field according to its checkbox
            searchPrefixField.setEnabled(defaultSearchBox.isSelected());      
        }
        ignoreConfigBox.setEnabled(!isInUse);
        configLocationBox.setEnabled(!isInUse);
        //disable field if the single application commands are in use
        if(isInUse) {
            configLocationField.setEnabled(!isInUse); 
        }
        else {
            //if reset: enable the field according to its checkbox
            configLocationField.setEnabled(configLocationBox.isSelected());            
        }
        configDirChooserButton.setEnabled(!isInUse);
        flatPlaylistBox.setEnabled(!isInUse);
        markedWatchedBox.setEnabled(!isInUse);
        noMarkedWatchedBox.setEnabled(!isInUse);
        noColorBox.setEnabled(!isInUse);
    }
    
    
    private void resetGeneralSettingsPageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        //reset locked page settings/tabs throught the program
        singleAppCommandsDisableAllFunctions(false);
        //reset all settings on general options page
        singleCommandGroup.clearSelection();
        singleCommandResetButton.setEnabled(false);
        ignoreErrorsBox.setSelected(false);
        abortOnErrorBox.setSelected(false);
        dumpUserAgentBox.setSelected(false);
        extractorDescriptionsBox.setSelected(false);
        listExtractorsBox.setSelected(false);
        extractorDescriptionsBox.setSelected(false);
        forceGenericExtractorsBox.setSelected(false);
        defaultSearchBox.setSelected(false);
        searchPrefixField.setEnabled(false);
        searchPrefixField.setText("DEFAULT_SEARCH_NOT_ENABLED");
        ignoreConfigBox.setSelected(false);
        configLocationBox.setSelected(false);
        configLocationField.setEnabled(false);
        configLocationField.setText("CONFIG_LOCATION_NOT_ENABLED");
        configDirChooserButton.setEnabled(false);
        flatPlaylistBox.setSelected(false);
        markedWatchedBox.setSelected(false);
        noMarkedWatchedBox.setSelected(false);
        noColorBox.setSelected(false);
    }                                                              

    private void proxyServerBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // enabled or disable proxyURLField
        if(proxyServerBox.isSelected()) {
            proxyURLField.setEnabled(true);
            proxyURLField.setText("");
        }
        else {
            proxyURLField.setEnabled(false);
            proxyURLField.setText("PROXY_SERVER_NOT_ENABLED");
        }
    }                                              

    private void socketTimeoutBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(socketTimeoutBox.isSelected()) {
            socketTimeoutSecondsSpinner.setEnabled(true);
        }
        else {
            socketTimeoutSecondsSpinner.setEnabled(false);
            socketTimeoutSecondsSpinner.setValue(0);
        }
    }                                                

    private void sourceIPAddressBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if(sourceIPAddressBox.isSelected()) {
            sourceIPField.setText("");
            sourceIPField.setEnabled(true);
        }
        else {
            sourceIPField.setText("SOURCE_ADDRESS_IP_NOT_ENABLED");
            sourceIPField.setEnabled(false);
        }
    }                                                  

    private void IPvSelectionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        IPvSettingsGroup.clearSelection();
        IPvSelectionResetButton.setEnabled(false);
    }                                                       

    private void geoProxyURLFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void geoProxyBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(geoProxyBox.isSelected()) {
            geoProxyURLField.setEnabled(true);
            geoProxyURLField.setText("");
        }
        else {
            geoProxyURLField.setEnabled(false);
            geoProxyURLField.setText("GEO_PROXY_URL_NOT_ENALBED");
        }
    }                                           

    private void geoBypassSelectionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        geoBypassSettingsGroup.clearSelection();
        geoBypassSelectionResetButton.setEnabled(false);
    }                                                             

    private void geoBypassCountryCodeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        if(geoBypassCountryCodeBox.isSelected()) {
            countryCodeField.setEnabled(true);
            countryCodeField.setText("");
        }
        else {
            countryCodeField.setEnabled(false);
            countryCodeField.setText("ISO_COUNTRY_CODE_NOT_ENABLED");
        }
    }                                                       

    private void geoBypassIPBlockBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        if(geoBypassIPBlockBox.isSelected()) {
            geoBypassIPBlockField.setText("");
            geoBypassIPBlockField.setEnabled(true);
        }
        else {
            geoBypassIPBlockField.setText("GEO_BYPASS_IP_BLOCK");
            geoBypassIPBlockField.setEnabled(false);
        }
    }                                                   

    private void resetNetworkGeoSettingsPageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        proxyServerBox.setSelected(false);
        
        proxyURLField.setEnabled(false);
        proxyURLField.setText("PROXY_SERVER_NOT_ENABLED");
        
        socketTimeoutBox.setSelected(false);
        socketTimeoutSecondsSpinner.setEnabled(false);
        socketTimeoutSecondsSpinner.setValue(0);
        
        sourceIPAddressBox.setSelected(false);
        sourceIPField.setText("SOURCE_ADDRESS_IP_NOT_ENABLED");
        sourceIPField.setEnabled(false);
        IPvSettingsGroup.clearSelection();
        IPvSelectionResetButton.setEnabled(false);
        
        geoProxyBox.setSelected(false);
        geoProxyURLField.setEnabled(false);
        geoProxyURLField.setText("GEO_PROXY_URL_NOT_ENALBED");
        
        geoBypassSettingsGroup.clearSelection();
        geoBypassSelectionResetButton.setEnabled(false);
        geoBypassCountryCodeBox.setSelected(false);
        countryCodeField.setEnabled(false);
        countryCodeField.setText("ISO_COUNTRY_CODE_NOT_ENABLED");
        
        geoBypassIPBlockBox.setSelected(false);
        geoBypassIPBlockField.setText("GEO_BYPASS_IP_BLOCK");
        geoBypassIPBlockField.setEnabled(false);
    }                                                                 

    private void proxyURLFieldActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void videoFormatFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void listFormatsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void youTubeSkipDashBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void allFormatsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void mergeOutputFormatBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }                                                    

    private void videoFormatCodeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if(videoFormatCodeBox.isSelected()) {
            videoFormatField.setEnabled(true);
            videoFormatField.setText("");
        }
        else {
            videoFormatField.setEnabled(false);
            videoFormatField.setText("VIDEO_FORMAT_CODE_NOT_ENABLED");
        }
    }                                                  

    private void resetVideoFormatSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                             
        videoFormatCodeBox.setSelected(false);
        videoFormatField.setEnabled(false);
        videoFormatField.setText("VIDEO_FORMAT_CODE_NOT_ENABLED");
        allFormatsBox.setSelected(false);
        preferFreeFormatsBox.setSelected(false);
        listFormatsBox.setSelected(false);
        youTubeSkipDashBox.setSelected(false);
        mergeOutputFormatBox.setSelected(false);
    }                                                            

    private void subLangBoxActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(subLangBox.isSelected()) {
            subLangField.setEnabled(true);
            subLangField.setText("");
        }
        else {
            subLangField.setEnabled(false);
            subLangField.setText("SUB_LANG_NOT_ENABLED");
        }
    }                                          

    private void subFormatBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(subFormatBox.isSelected()) {
            subFormatField.setText("");
            subFormatField.setEnabled(true);
        }
        else {
            subFormatField.setText("SUB_FORMAT_NOT_ENABLED");
            subFormatField.setEnabled(false);
        }
    }                                            

    private void subtitleSettingsPageResetActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        writeSubBox.setSelected(false);
        writeAutoSubBox.setSelected(false);
        allSubsBox.setSelected(false);
        listSubsBox.setSelected(false);
        subFormatBox.setSelected(false);
        subFormatField.setText("SUB_FORMAT_NOT_ENABLED");
        subFormatField.setEnabled(false);
        subLangBox.setSelected(false);
        subLangField.setEnabled(false);
        subLangField.setText("SUB_LANG_NOT_ENABLED");
    }                                                         

    private void allSubsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void twoFactorFieldActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void videoPasswordBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(videoPasswordBox.isSelected()) {
            videoPasswordField.setText("");
            videoPasswordField.setEnabled(true);
        }
        else {
            videoPasswordField.setText("VIDEO_PASSWORD_NOT_ENABLED");
            videoPasswordField.setEnabled(false);
        }
    }                                                

    private void userNameBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(userNameBox.isSelected()) {
            userNameField.setEnabled(true);
            userNameField.setText("");
        }
        else {
            userNameField.setEnabled(false);
            userNameField.setText("USERNAME_NOT_ENABLED");
        }
    }                                           

    private void passwordBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(passwordBox.isSelected()) {
            passwordField.setEnabled(true);
            passwordField.setText("");
            if(showPasswordBox.isSelected()) {
                passwordField.setEchoChar((char)0);
            }
            else {
                passwordField.setEchoChar('*');
            }
 
        }
        else {
            passwordField.setEnabled(false);
            passwordField.setText("PASSWORD_NOT_ENABLED");
            passwordField.setEchoChar((char)0);
        }
    }                                           

    private void showPasswordBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(showPasswordBox.isSelected()) {
            passwordField.setEchoChar((char)0);
        }
        else {
            passwordField.setEchoChar('*');
        }
    }                                               

    private void twoFactorBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(twoFactorBox.isSelected()) {
            twoFactorField.setText("");
            twoFactorField.setEnabled(true);
        }
        else {
            twoFactorField.setText("2FA_NOT_ENABLED");
            twoFactorField.setEnabled(false);
        }
    }                                            

    private void netrcBoxActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void authenticationSettingsPageResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                      
        userNameBox.setSelected(false);
        userNameField.setEnabled(false);
        userNameField.setText("USERNAME_NOT_ENABLED");
        passwordBox.setSelected(false);
        passwordField.setEnabled(false);
        passwordField.setText("PASSWORD_NOT_ENABLED");
        passwordField.setEchoChar((char)0);
        showPasswordBox.setSelected(false);
        twoFactorBox.setSelected(false);
        twoFactorField.setText("2FA_NOT_ENABLED");
        twoFactorField.setEnabled(false);
        netrcBox.setSelected(false);
        videoPasswordBox.setSelected(false);
        videoPasswordField.setText("VIDEO_PASSWORD_NOT_ENABLED");
        videoPasswordField.setEnabled(false);
    }                                                                     

    private void adobeMSOFieldActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void adobePassMSOBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(adobePassMSOBox.isSelected()) {
            adobeMSOField.setText("");
            adobeMSOField.setEnabled(true);
        }
        else {
            adobeMSOField.setText("ADOBE_MSO_ID_NOT_ENABLED");
            adobeMSOField.setEnabled(false);
        }
    }                                               

    private void adobePassAccountBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        if(adobePassAccountBox.isSelected()) {
            adobeUserNameField.setEnabled(true);
            adobeUserNameField.setText("");
            adobePasswordField.setEchoChar('*');
            adobePasswordField.setEnabled(true);
            adobePasswordField.setText("");
        }
        else {
            adobeUserNameField.setEnabled(false);
            adobeUserNameField.setText("ADOBE_USER_NAME_NOT_ENABLED");
            adobePasswordField.setEnabled(false);
            adobePasswordField.setText("ADOBE_PASSWORD_NOT_ENABLED");
        }
    }                                                   

    private void adobeShowPasswordBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        if(adobeShowPasswordBox.isSelected()) {
            adobePasswordField.setEchoChar((char)0);
        }
        else {
            adobePasswordField.setEchoChar('*');
        }
    }                                                    

    private void adobeUserNameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void adobePassSettingsPageResetActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        adobePassMSOBox.setSelected(false);
        adobeMSOField.setText("ADOBE_MSO_ID_NOT_ENABLED");
        adobeMSOField.setEnabled(false);
        adobePassAccountBox.setSelected(false);
        adobeUserNameField.setText("ADOBE_USER_NAME_NOT_ENABLED");
        adobeUserNameField.setEnabled(false);
        adobePasswordField.setText("ADOBE_PASSWORD_NOT_ENABLED");
        adobePasswordField.setEnabled(false);
        adobePasswordField.setEchoChar((char)0);
        adobeShowPasswordBox.setSelected(false);
        apListMSOBox.setSelected(false);
        
        
        
    }                                                          

    private void playlistStartBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(playlistStartBox.isSelected()) {
            playlistStartNoSpinner.setEnabled(true);
        }
        else {
            playlistStartNoSpinner.setEnabled(false);
            playlistStartNoSpinner.setValue(1);
        }
    }                                                

    private void playlistEndNoBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(playlistEndNoBox.isSelected()) {
            playlistEndNoSpinner.setEnabled(true);
        }
        else {
            playlistEndNoSpinner.setEnabled(false);
            playlistEndNoSpinner.setValue(-1);
        }
    }                                                

    private void playlistItemsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(playlistItemsBox.isSelected()) {
            playlistItemsField.setText("");
            playlistItemsField.setEnabled(true);
        }
        else {
            playlistItemsField.setText("PLAYLIST_ITEMS_NOT_ENABLED");
            playlistItemsField.setEnabled(false);

        }
    }                                                

    private void matchTitleBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(matchTitleBox.isSelected()) {
            matchTitleField.setText("");
            matchTitleField.setEnabled(true);            
        }
        else {
            matchTitleField.setText("REGEX_NOT_ENABLED");
            matchTitleField.setEnabled(false);
        }
    }                                             

    private void matchTitleFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void rejectTitleBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(rejectTitleBox.isSelected()) {
            rejectTitleField.setText("");
            rejectTitleField.setEnabled(true);

        }
        else {
            rejectTitleField.setText("REGEX_NOT_ENABLED");
            rejectTitleField.setEnabled(false);

        }
    }                                              

    private void maxDownloadsNoBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if(maxDownloadsNoBox.isSelected()) {
            maxDownloadsNoSpinner.setEnabled(true); 
        }
        else {
            maxDownloadsNoSpinner.setValue(1);
            maxDownloadsNoSpinner.setEnabled(false);            
        }
    }                                                 

    private void dateBeforeFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void dateAfterBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(dateAfterBox.isSelected()) {
            dateAfterField.setEnabled(true);
            dateAfterField.setText("");
        }
        else {
            dateAfterField.setEnabled(false);
            dateAfterField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        }
    }                                            

    private void dateAfterFieldActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void matchFilterBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(matchFilterBox.isSelected()) {
            matchFilterField.setText("");
            matchFilterField.setEnabled(true);
        }
        else {
            matchFilterField.setText("FILTER_NOT_ENABLED");
            matchFilterField.setEnabled(false);
        }
    }                                              

    private void downloadArchiveBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if(downloadArchiveBox.isSelected()) {
            downloadArchivePathField.setText("");
            downloadArchivePathField.setEnabled(true);
            downloadArchiveFileChooserButton.setEnabled(true);

        }
        else {
            downloadArchivePathField.setText("PATH_TO_ARCHIVE_NOT_ENABLED");
            downloadArchivePathField.setEnabled(false);
            downloadArchiveFileChooserButton.setEnabled(false);

        }
    }                                                  

    private void downloadArchivePathFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void yesPlaylistRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        playlistSelectionResetButton.setEnabled(true);
    }                                                  

    private void downloadArchiveFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
		JFileChooser archivePath = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

		int userSelection = archivePath.showOpenDialog(null);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File selectedFile = archivePath.getSelectedFile();
                        downloadArchivePathField.setText(selectedFile.getAbsolutePath());
		}
    }                                                                

    private void geoBypassRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        geoBypassSelectionResetButton.setEnabled(true);
    }                                                

    private void noGeoBypassRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        geoBypassSelectionResetButton.setEnabled(true);
    }                                                  

    private void forceIPv6RButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        IPvSelectionResetButton.setEnabled(true);
    }                                                

    private void forceIPv4RButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        IPvSelectionResetButton.setEnabled(true);
    }                                                

    private void playlistSelectionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                             
        playlistSelectionGroup.clearSelection();
        playlistSelectionResetButton.setEnabled(false);
    }                                                            

    private void minFileSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(minFileSizeBox.isSelected()) {
            minFileSizeField.setEnabled(true);
            minFileSizeField.setText("");
        }
        else {
            minFileSizeField.setEnabled(false);
            minFileSizeField.setText("FILE_SIZE_NOT_ENABLED");
        }
    }                                              

    private void maxFileSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(maxFileSizeBox.isSelected()) {
            maxFileSizeField.setEnabled(true);
            maxFileSizeField.setText("");
        }
        else {
            maxFileSizeField.setEnabled(false);
            maxFileSizeField.setText("FILE_SIZE_NOT_ENABLED");
        }
    }                                              

    private void dateBeforeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(dateBeforeBox.isSelected()) {
            dateBeforeField.setEnabled(true);
            dateBeforeField.setText("");            
        }
        else {
            dateBeforeField.setEnabled(false);
            dateBeforeField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        }
    }                                             

    private void dateBoxActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(dateBox.isSelected()) {
            dateField.setEnabled(true);
            dateField.setText("");
        }
        else {
            dateField.setEnabled(false);
            dateField.setText("DATE_NOT_ENABLED (YYYYMMDD)");
        }
    }                                       

    private void minViewsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(minViewsBox.isSelected()) {
            minViewsSpinner.setEnabled(true);
        }
        else {
            minViewsSpinner.setValue(0);
            minViewsSpinner.setEnabled(false);
        }
    }                                           

    private void maxViewsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(maxViewsBox.isSelected()) {
            maxViewsSpinner.setEnabled(true);
        }
        else {
            maxViewsSpinner.setEnabled(false);
            maxViewsSpinner.setValue(0);
        }
    }                                           

    private void noPlaylistRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        playlistSelectionResetButton.setEnabled(true);
    }                                                 

    private void ageLimitBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(ageLimitBox.isSelected()) {
            ageLimitSpinner.setEnabled(true);
        }
        else {
            ageLimitSpinner.setValue(18);
            ageLimitSpinner.setEnabled(false);            
        }
    }                                           

    private void resetVideoSelectionSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                                
        playlistStartBox.setSelected(false);
        playlistStartNoSpinner.setEnabled(false);
        playlistStartNoSpinner.setValue(1);

        playlistEndNoBox.setSelected(false);
        playlistEndNoSpinner.setEnabled(false);
        playlistEndNoSpinner.setValue(-1);

        playlistItemsBox.setSelected(false);
        playlistItemsField.setText("PLAYLIST_ITEMS_NOT_ENABLED");
        playlistItemsField.setEnabled(false);

        matchTitleBox.setSelected(false);
        matchTitleField.setText("REGEX_NOT_ENABLED");
        matchTitleField.setEnabled(false);

        rejectTitleBox.setSelected(false);
        rejectTitleField.setText("REGEX_NOT_ENABLED");
        rejectTitleField.setEnabled(false);
        
        maxDownloadsNoBox.setSelected(false);
        maxDownloadsNoSpinner.setValue(0);
        maxDownloadsNoSpinner.setEnabled(false);

        maxDownloadsNoBox.setSelected(false);
        maxDownloadsNoSpinner.setValue(0);
        maxDownloadsNoSpinner.setEnabled(false);

        minFileSizeBox.setSelected(false);
        minFileSizeField.setEnabled(false);
        minFileSizeField.setText("FILE_SIZE_NOT_ENABLED");

        maxFileSizeBox.setSelected(false);
        maxFileSizeField.setEnabled(false);
        maxFileSizeField.setText("FILE_SIZE_NOT_ENABLED");
        dateBox.setSelected(false);
        dateField.setEnabled(false);
        dateField.setText("DATE_NOT_ENABLED (YYYYMMDD)");

        dateBeforeBox.setSelected(false);
        dateBeforeField.setEnabled(false);
        dateBeforeField.setText("DATE_NOT_ENABLED (YYYYMMDD)");

        dateAfterBox.setSelected(false);
        dateAfterField.setEnabled(false);
        dateAfterField.setText("DATE_NOT_ENABLED (YYYYMMDD)");

        minViewsBox.setSelected(false);
        minViewsSpinner.setValue(1);
        minViewsSpinner.setEnabled(false);

        maxViewsBox.setSelected(false);
        maxViewsSpinner.setEnabled(false);
        maxViewsSpinner.setValue(0);
        minViewsSpinner.setValue(0);
        minViewsSpinner.setEnabled(false);

        matchFilterBox.setSelected(false);
        matchFilterField.setText("FILTER_NOT_ENABLED");
        matchFilterField.setEnabled(false);

        playlistSelectionGroup.clearSelection();
        playlistSelectionResetButton.setEnabled(false);

        ageLimitBox.setSelected(false);
        ageLimitSpinner.setValue(18);
        ageLimitSpinner.setEnabled(false);

        downloadArchiveBox.setSelected(false);
        downloadArchivePathField.setText("PATH_TO_ARCHIVE_NOT_ENABLED");
        downloadArchivePathField.setEnabled(false);
        downloadArchiveFileChooserButton.setEnabled(false);

        includeAddsBox.setSelected(false);
    }                                                               

    private void limitRateBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(limitRateBox.isSelected()) {
            limitRateField.setText("");
            limitRateField.setEnabled(true);
        }
        else {
            limitRateField.setText("RATE_NOT_ENABLED");
            limitRateField.setEnabled(false);
        }
    }                                            

    private void retriesBoxActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(retriesBox.isSelected()) {
            retriesSpinner.setEnabled(true);
        }
        else {
            retriesSpinner.setValue(10);
            retriesSpinner.setEnabled(false);
        }
    }                                          

    private void fragmentRetriesBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if(fragmentRetriesBox.isSelected()) {
            fragmentRetriesSpinner.setEnabled(true);
        }
        else {
            fragmentRetriesSpinner.setEnabled(false);
            fragmentRetriesSpinner.setValue(10);
        }
    }                                                  

    private void bufferSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(bufferSizeBox.isSelected()) {
            bufferSizeField.setEnabled(true);
            bufferSizeField.setText("");           
        }
        else {
            bufferSizeField.setEnabled(false);
            bufferSizeField.setText("BUFFER_SIZE_NOT_ENABLED");
        }
    }                                             

    private void httpChunkSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(httpChunkSizeBox.isSelected()) {
            httpChunkSizeField.setEnabled(true);
            httpChunkSizeField.setText("");
        }
        else {
            httpChunkSizeField.setEnabled(false);
            httpChunkSizeField.setText("CHUNK_SIZE_NOT_ENABLED");            
        }
    }                                                

    private void hlsPreferFfmpegRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        hlsSelectionResetButton.setEnabled(true);
    }                                                      

    private void hlsPreferNativeRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        hlsSelectionResetButton.setEnabled(true);
    }                                                      

    private void hlsSelectionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        hlsSelectionResetButton.setEnabled(false);
        hlsSelectionGroup.clearSelection();
    }                                                       

    private void externalDownloaderBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        if(externalDownloaderBox.isSelected()) {
            externalDownloaderField.setText("");
            externalDownloaderField.setEnabled(true);
        }
        else {
            externalDownloaderField.setText("EXTERNAL_DOWNLOADER_NOT_ENABLED");
            externalDownloaderField.setEnabled(false);
        }
    }                                                     

    private void externalDownloaderArgsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        if(externalDownloaderArgsBox.isSelected()) {
            externalDownloaderArgsField.setEnabled(true);
            externalDownloaderArgsField.setText("");
        }
        else {
            externalDownloaderArgsField.setEnabled(false);
            externalDownloaderArgsField.setText("ARGS_NOT_ENABLED");
        }
    }                                                         

    private void resetDownloaderOptionsSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                                   
    limitRateBox.setSelected(false);
    limitRateField.setText("RATE_NOT_ENABLED");
    limitRateField.setEnabled(false);

    retriesBox.setSelected(false);
    retriesSpinner.setValue(10);
    retriesSpinner.setEnabled(false);

    fragmentRetriesBox.setSelected(false);
    fragmentRetriesSpinner.setEnabled(false);
    fragmentRetriesSpinner.setValue(10);
    skipUnavailableFragmentsBox.setSelected(false);
    abortOnUnavailableFragmentBox.setSelected(false);
    keepFragmentsBox.setSelected(false);
    bufferSizeBox.setSelected(false);
    bufferSizeField.setEnabled(false);
    bufferSizeField.setText("BUFFER_SIZE_NOT_ENABLED");
    noResizeBufferBox.setSelected(false);
    httpChunkSizeBox.setSelected(false);
    httpChunkSizeField.setEnabled(false);
    httpChunkSizeField.setText("CHUNK_SIZE_NOT_ENABLED");
    playlistReverseBox.setSelected(false);
    playlistRandomBox.setSelected(false);
    xattrSetFilesizeBox.setSelected(false);
    hlsSelectionGroup.clearSelection();
    hlsSelectionResetButton.setEnabled(false);
    hlsUseMpegtsBox.setSelected(false);
    externalDownloaderBox.setSelected(false);
    externalDownloaderField.setEnabled(false);
    externalDownloaderField.setText("EXTERNAL_DOWNLOADER_NOT_ENABLED");
    externalDownloaderArgsBox.setSelected(false);
    externalDownloaderArgsField.setEnabled(false);
    externalDownloaderArgsField.setText("ARGS_NOT_ENABLED");
    }                                                                  

    private void encodingBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(encodingBox.isSelected()) {
            encodingField.setEnabled(true);
            encodingField.setText("");
        }
        else {
            encodingField.setEnabled(false);
            encodingField.setText("ENCODING_NOT_ENABLED");
        }
    }                                           

    private void noCheckCertificateBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void preferInsecureBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void encodingFieldActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void userAgentBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(userAgentBox.isSelected()) {
            userAgentField.setEnabled(true);
            userAgentField.setText("");

        }
        else {
            userAgentField.setEnabled(false);
            userAgentField.setText("USER_AGENT_NOT_ENABLED");
            
        }
    }                                            

    private void refererBoxActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(refererBox.isSelected()) {
            refererField.setText("");
            refererField.setEnabled(true);
        }
        else {
            refererField.setText("REFERER_URL_NOT_ENABLED");
            refererField.setEnabled(false); 
        }
    }                                          

    private void headerFieldActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void valueFieldActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    //Create the list model for the HTTP header
    DefaultListModel httpHeaderList = new DefaultListModel();
   
    private void addHeaderButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        headerList.setModel(httpHeaderList);
        httpHeaderList.addElement("-add-header "+headerField.getText()+":"+valueField.getText());
        headerField.setText("");
        valueField.setText("");
        addHeaderButton.setEnabled(false);
        clearHeaderListButton.setEnabled(true);
    }                                               

    private void refererFieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void addHeaderBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(addHeaderBox.isSelected()) {
            headerList.setEnabled(true);
            deleteHeaderButton.setEnabled(false);
            clearHeaderListButton.setEnabled(false);
            addHeaderButton.setEnabled(false);
            headerField.setEnabled(true);
            headerField.setText("");
            valueField.setEnabled(true);
            valueField.setText("");
        }
        else {
            headerList.setEnabled(false);
            deleteHeaderButton.setEnabled(false);
            clearHeaderListButton.setEnabled(false);
            addHeaderButton.setEnabled(false);
            headerField.setEnabled(false);
            headerField.setText("HEADER");
            valueField.setEnabled(false);
            valueField.setText("VALUE");
            httpHeaderList.clear();
        }
    }                                            

    private void headerFieldCaretUpdate(javax.swing.event.CaretEvent evt) {                                        
        if(addHeaderBox.isSelected() && !headerField.getText().isBlank() && !valueField.getText().isBlank()) {
            addHeaderButton.setEnabled(true);
        }
        else {
            addHeaderButton.setEnabled(false);
        }
    }                                       

    private void valueFieldCaretUpdate(javax.swing.event.CaretEvent evt) {                                       
        if(addHeaderBox.isSelected() && !headerField.getText().isBlank() && !valueField.getText().isBlank()) {
            addHeaderButton.setEnabled(true);
        }
        else {
            addHeaderButton.setEnabled(false);
        }
    }                                      

    //prior list selection variable
    String listSelection = null;
    private void headerListMouseClicked(java.awt.event.MouseEvent evt) {                                        
        //if the model selection list is not empty
        if(!httpHeaderList.isEmpty()) {
           //if the prior selection is not null and the prior selection equals to the current
            if(listSelection != null && listSelection.equals(headerList.getSelectedValue())) {
                //clear the selection on the list
                headerList.clearSelection();
                //reset the prior selection variable to null
                listSelection = null;
            }
            
            //If there is a selected value from the list
            if(headerList.getSelectedValue() != null) {
                listSelection = headerList.getSelectedValue();
                //System.out.println(listSelection+" | "+headerList.getSelectedIndex());
                deleteHeaderButton.setEnabled(true);
            }
            else {
                deleteHeaderButton.setEnabled(false);
            }
        }  
    }                                       

    private void sleepIntervalBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(sleepIntervalBox.isSelected()) {
            sleepIntervalSecondsSpinner.setEnabled(true);
        }
        else {
            sleepIntervalSecondsSpinner.setEnabled(false);
            sleepIntervalSecondsSpinner.setValue(0);
        }
    }                                                

    private void maxSleepIntervalBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        if(maxSleepIntervalBox.isSelected()) {
            maxSleepIntervalSpinner.setEnabled(true);            
        }
        else {
            maxSleepIntervalSpinner.setEnabled(false);
            maxSleepIntervalSpinner.setValue(0);            
        }
    }                                                   

    private void clearHeaderListButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        clearHeaderListButton.setEnabled(false);
        listSelection = null;
        headerList.clearSelection();
        httpHeaderList.clear();
    }                                                     

    private void deleteHeaderButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        deleteHeaderButton.setEnabled(false);
        httpHeaderList.removeElementAt(headerList.getSelectedIndex());
        headerList.clearSelection();
    }                                                  

    private void resetWorkaroundSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        encodingBox.setSelected(false);
        encodingField.setEnabled(false);
        encodingField.setText("ENCODING_NOT_ENABLED");
        noCheckCertificateBox.setSelected(false);
        preferInsecureBox.setSelected(false);
        userAgentBox.setSelected(false);
        userAgentField.setEnabled(false);
        userAgentField.setText("USER_AGENT_NOT_ENABLED");
        refererBox.setSelected(false);
        refererField.setText("REFERER_URL_NOT_ENABLED");
        refererField.setEnabled(false);
        addHeaderBox.setSelected(false);
        headerList.setEnabled(false);
        headerField.setText("FIELD");
        headerField.setEnabled(false);
        

        valueField.setText("VALUE");
        valueField.setEnabled(false);
        httpHeaderList.clear();
        headerList.clearSelection();
        
        deleteHeaderButton.setEnabled(false);
        clearHeaderListButton.setEnabled(false);
        addHeaderButton.setEnabled(false);
        bidiWorkaroundBox.setSelected(false);
        sleepIntervalBox.setSelected(false);
        sleepIntervalSecondsSpinner.setEnabled(false);
        sleepIntervalSecondsSpinner.setValue(0);
        maxSleepIntervalBox.setSelected(false);
        maxSleepIntervalSpinner.setEnabled(false);
        maxSleepIntervalSpinner.setValue(0);
    }                                                           

    private void audioFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                    

    }                                                   

    private void preferAvconvRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        postProcessorSettingResetButton.setEnabled(true);
    }                                                   

    private void postProcessorSettingResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                
        postProcessorSettingResetButton.setEnabled(false);
        postProcessorGroup.clearSelection();
    }                                                               

    private void preferFfmpegRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        postProcessorSettingResetButton.setEnabled(true);
    }                                                   

    private void audioFormatBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(audioFormatBox.isSelected()) {
            audioFormatComboBox.setEnabled(true);            
        }
        else {
            audioFormatComboBox.setEnabled(false);
            audioFormatComboBox.setSelectedIndex(0);
        }

    }                                              

    private void audioQualityBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(audioQualityBox.isSelected()) {
            audioQualityValueSpinner.setEnabled(true);            
        }
        else {
            audioQualityValueSpinner.setEnabled(false);
            audioQualityValueSpinner.setValue(5);            
        }
    }                                               

    private void postProcessorArgsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        if(postProcessorArgsBox.isSelected()) {
            postProcessorArgsField.setEnabled(true);
            postProcessorArgsField.setText("");  
        }
        else {
            postProcessorArgsField.setEnabled(false);
            postProcessorArgsField.setText("ARGS_NOT_ENABLED");       
        }
    }                                                    

    private void addMetaDataBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void metaDataFromTitleFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        
    }                                                      

    private void metaDataFromTitleBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        if(metaDataFromTitleBox.isSelected()) {
            metaDataFromTitleField.setEnabled(true);
            metaDataFromTitleField.setText("");               
        }
        else {
            metaDataFromTitleField.setEnabled(false);
            metaDataFromTitleField.setText("FORMAT_NOT_ENABLED");            
        }
    }                                                    

    private void ffmpegLocationPathBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        if(ffmpegLocationPathBox.isSelected()) {
            ffmpegLocationField.setEnabled(true);
            ffmpegLocationField.setText("");
            ffmpegDirChooserButton.setEnabled(true);
        }
        else {
            ffmpegLocationField.setEnabled(false);
            ffmpegLocationField.setText("PATH_NOT_ENABLED");
            ffmpegDirChooserButton.setEnabled(false);
        }
    }                                                     

    private void fixUpBoxActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(fixUpBox.isSelected()) {
            fixUpField.setEnabled(true);
            fixUpField.setText("");
        }
        else {
            fixUpField.setEnabled(false);
            fixUpField.setText("PATH_NOT_ENABLED");            
        }
    }                                        

    private void recodeVideoBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(recodeVideoBox.isSelected()) {
            recodeVideoComboBox.setEnabled(true);
        }
        else {
            recodeVideoComboBox.setEnabled(false);
            recodeVideoComboBox.setSelectedIndex(0);
        }
    }                                              

    private void convertSubBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(convertSubBox.isSelected()) {
            convertSubComboBox.setEnabled(true);
        }
        else {
            convertSubComboBox.setSelectedIndex(0);
            convertSubComboBox.setEnabled(false);            
        }
    }                                             

    private void execBoxActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(execBox.isSelected()) {
            execField.setEnabled(true);
            execField.setText("");
        }
        else {
            execField.setEnabled(false);
            execField.setText("CMD_NOT_ENABLED");
        }
    }                                       

    private void ffmpegDirChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
		JFileChooser binaryFile = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                
                binaryFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		
                int userSelection = binaryFile.showOpenDialog(null);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File selectedFile = binaryFile.getSelectedFile();
                        ffmpegLocationField.setText(selectedFile.getAbsolutePath());
		}
    }                                                      

    private void resetWorkaroundsSettingsPageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                   
        extractAudioBox.setSelected(false);
        audioFormatBox.setSelected(false);
        audioFormatComboBox.setEnabled(false);
        audioFormatComboBox.setSelectedIndex(0);
        audioQualityBox.setSelected(false);
        audioQualityValueSpinner.setEnabled(false);
        audioQualityValueSpinner.setValue(5);
        recodeVideoBox.setSelected(false);
        recodeVideoComboBox.setEnabled(false);
        recodeVideoComboBox.setSelectedIndex(0);
        postProcessorArgsBox.setSelected(false);
        postProcessorArgsField.setEnabled(false);
        postProcessorArgsField.setText("ARGS_NOT_ENABLED");
        keepVideoBox.setSelected(false);
        noPostOverwritesBox.setSelected(false);
        embedSubBox.setSelected(false);
        embedThumbnailBox.setSelected(false);
        addMetaDataBox.setSelected(false);
        metaDataFromTitleBox.setSelected(false);
        metaDataFromTitleField.setEnabled(false);
        metaDataFromTitleField.setText("FORMAT_NOT_ENABLED");
        xattrsBox.setSelected(false);
        fixUpBox.setSelected(false);
        fixUpField.setEnabled(false);
        fixUpField.setText("PATH_NOT_ENABLED");
        postProcessorGroup.clearSelection();
        postProcessorSettingResetButton.setEnabled(false);
        ffmpegLocationPathBox.setSelected(false);
        ffmpegLocationField.setEnabled(false);
        ffmpegLocationField.setText("PATH_NOT_ENABLED");  
        ffmpegDirChooserButton.setEnabled(false);
        execBox.setSelected(false);
        execField.setEnabled(false);
        execField.setText("CMD_NOT_ENABLED");
        convertSubBox.setSelected(false);
        convertSubComboBox.setSelectedIndex(0);
        convertSubComboBox.setEnabled(false);

    }                                                                  

    private void configDirChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
       JFileChooser configDir = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                
        configDir.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);	
        int userSelection = configDir.showOpenDialog(null);

	if(userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = configDir.getSelectedFile();
            configLocationField.setText(selectedFile.getAbsolutePath());
        }
    }                                                      

    private void copyLogToClipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void generateCommandsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        generateCommand();
    }                                                      

    public static ArrayList<String> consoleLog = new ArrayList<String>();
    private void generateCommand() {
        
        //command format: youtube-dl [OPTIONS] URL [URL...]    
        //[alart] user attention/acknowledgement required/highly recommneded
        //[error!] error input missing/partial/confict inputs
        //[info] information about the process/choice being taken from the inputs
        //[action] action takem by the program to correct errors
        
        consoleLog.clear();
        String youtubeDLCommand = "youtube-dl";

        /*
        * GENERAL OPTIONS
        */
        
        //--help
        if(helpRButton.isSelected()) {
            youtubeDLCommand = youtubeDLCommand +" --help";
            if(verboseLogOutputBox.isSelected()) {
                consoleLog.add("[info] A single use command has been used, no other arguments or commands"
                        + "can be added to this command statement");
            }
            consoleLog.add("[info] The \"help\" option has been successfully compiled to output.");
        }
        //--version
        if(versionRButton.isSelected()) {
            youtubeDLCommand = youtubeDLCommand+" --version";
            if(verboseLogOutputBox.isSelected()) {
                consoleLog.add("[info] A single use command has been used, no other arguments or commands"
                        + "can be added to this command statement"); 
            }      
            consoleLog.add("[info] The \"version\" option has been successfully compiled to output.");
        }
        
        //--update
        if(updateRButton.isSelected()) {
            youtubeDLCommand = youtubeDLCommand+" --update";
            if(verboseLogOutputBox.isSelected()) {
                consoleLog.add("[info] A single use command has been used, no other arguments or commands"
                        + "can be added to this command statement");   
            }      
            consoleLog.add("[info] the \"update\" option has been successfully compiled to output. ");
        }
        
        //if a single-use command has NOT been applied
        if(commandGenerationScroll.isEnabled()) {
           
            //--ignore-errors
            if(ignoreErrorsBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --ignore-errors";
                consoleLog.add("[info] ignore errors option has been applied successfully.");
            }
            //--abort-on-error
            if(abortOnErrorBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --abort-on-error";
                consoleLog.add("[info] abort on error option has been applied successfully.");
            }
            //--dump-user-agent
            if(dumpUserAgentBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --dump-user-agent";
                consoleLog.add("[info] dump user agent option has been applied successfully.");
            }
            //--list-extractors
            if(listExtractorsBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --list-extractors";
                consoleLog.add("[info] list extractors option has been applied successfully.");
            }
            //--extractor-descriptions
            if(extractorDescriptionsBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --extractor-descriptions";
                consoleLog.add("[info] extractor descriptions option has been applied successfully.");
            }
            //--force-generic-extractor
            if(forceGenericExtractorsBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --force-generic-extractor";
                consoleLog.add("[info] force generic extractor option has been applied successfully.");
            }
            if(defaultSearchBox.isSelected()) {
                //if the searchPrefixField is NOT empty
                if(!searchPrefixField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --default-search "+searchPrefixField.getText();
                    consoleLog.add("[info] default search option has been applied successfully with "
                            + "argument: \""+searchPrefixField.getText()+"\"");
                }
                //if the searchPrefixField is empty (Error case)
                else {
                    defaultSearchBox.setSelected(false);
                    searchPrefixField.setEnabled(false);
                    searchPrefixField.setText("DEFAULT_SEARCH_NOT_ENABLED");
                    consoleLog.add("[error!] the argument for search prefix field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] defaultSearchBox checkbox has been deselected to resolve the option error.");
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements.");
                    }
                }
            }
            //--ignore-config
            if(ignoreConfigBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --ignore-config";
                consoleLog.add("[info] ignore config option has been applied successfully.");
            }
            //--config-location PATH
            if(configLocationBox.isSelected()) {
                
                //standard condition
                if(!configLocationField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --config-location '" + configLocationField.getText()+"'";
                    consoleLog.add("[info] config location field option has been successfully applied with"
                            + "the argument: '"+configLocationField.getText()+"'.");
                }
                //error condition
                else {
                    consoleLog.add("[error!] the argument for config location path field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] configLoationBox checkbox/field has been deselected to resolve the option error.");
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements.");
                    }
                    configLocationBox.setSelected(false);
                    configLocationField.setEnabled(false);
                    configDirChooserButton.setEnabled(false); 
                    configLocationField.setText("CONFIG_LOCATION_NOT_ENABLED");
                }
            }
            //--flat-playlist
            if(flatPlaylistBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --flat-playlist";
                consoleLog.add("[info] flat playlist option has been successfully applied.");
            }
            //--mark-watched
            if(markedWatchedBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --mark-watched";
                consoleLog.add("[info] marked watched option has been successfully applied.");
            }
            //--no-mark-watched
            if(noMarkedWatchedBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --no-mark-watched";
                consoleLog.add("[info] no mark watched option has been successfully applied.");
            }
            //--no-color
            if(noColorBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --no-color";
                consoleLog.add("[info] no color option has been successfully applied");
            }
            
            /*
            * NETWORK & GEO-RESTRICTION OPTIONS
            */
            //--proxy URL
            if(proxyServerBox.isSelected()) {
                //standard case
                if(!proxyURLField.getText().isEmpty()) {
                    youtubeDLCommand = youtubeDLCommand + " --proxy \"" + proxyURLField.getText()+"\"";
                    consoleLog.add("[info] the proxy server option have been applied successfully with the "
                            +"arguemnt: \"" + proxyURLField.getText()+"\"");
                }
                //error condition
                else {
                    consoleLog.add("[error!] the argument for proxy URL field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] proxy server checkbox/field has been deselected to resolve the option error.");                    
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements.");
                    }
                    proxyServerBox.setSelected(false);
                    proxyURLField.setEnabled(false);
                    proxyURLField.setText("PROXY_SERVER_NOT_ENABLED");
                    
                }
            }
            //--socket-timeout SECONDS  
            if(socketTimeoutBox.isSelected()) {
                consoleLog.add("[info] the socket timeout (seconds) option has been successfully applied with"
                        + "the arguemnt: "+socketTimeoutSecondsSpinner.getValue());   
            }
            //--source-address IP
            if(sourceIPAddressBox.isSelected()) {
                
                if(!sourceIPField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --source-address" + sourceIPField.getText();
                    consoleLog.add("[info] source IP address option has been successfully applied with the"
                            + "argument: " + sourceIPField.getText());
                }
                else {
                    consoleLog.add("[error!] the argument for source IP field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] source IP checkbox/field has been deselected to resolve the option error.");    
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements.");   
                    }
                    sourceIPAddressBox.setSelected(false);
                    sourceIPField.setEnabled(false);
                    sourceIPField.setText("SOURCE_ADDRESS_IP_NOT_ENABLED");
                }
            }
            //--force-ipv4
            if(forceIPv4RButton.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --force-ipv4";
                consoleLog.add("[info] force ipv4 option has been successfully applied.");
            }
            //--force-ipv6
            if(forceIPv6RButton.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --force-ipv6";
                consoleLog.add("[info] force ipv6 option has been successfully applied");
            }
            //--geo-verification-proxy URL
            if(geoProxyBox.isSelected()) {
                if(!geoProxyURLField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --geo-verification-proxy "+geoProxyURLField.getText();
                    consoleLog.add("[info] geo proxy URL option has been applied successfully with the argument"
                            + geoProxyURLField.getText());
                }
                else {
                    consoleLog.add("[error!] the argument for geo verifcation proxy URL field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] geo verifcation proxy URL checkbox/field has been deselected to resolve the option error.");   
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements."); 
                    }
                    geoProxyBox.setSelected(false);
                    geoProxyURLField.setEnabled(false);
                    geoProxyURLField.setText("GEO_PROXY_URL_NOT_ENALBED");
                }
            }
            //--geo-bypass
            if(geoBypassRButton.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --geo-bypass";
                consoleLog.add("[info] geo-bypass option has been successfully applied");
            }
            //--no-geo-bypass
            if(noGeoBypassRButton.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --no-geo-bypass";
                consoleLog.add("[info] no geo-bypass option has been successfully applied.");
            }
            //--geo-bypass-country CODE
            if(geoBypassCountryCodeBox.isSelected()) {
                if(!countryCodeField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --geo-bypass-country "+countryCodeField.getText();
                    consoleLog.add("[info] geo-bypass-country code option has been applied "
                            + "successfully with the argument: "+countryCodeField.getText());
                }
                else {
                    consoleLog.add("[error!] the argument for geo-bypass-country code field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] geo-bypass-country code checkbox/field has been deselected to resolve the option error."); 
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements."); 
                    }
                    geoBypassCountryCodeBox.setSelected(false);
                    countryCodeField.setEnabled(false);
                    countryCodeField.setText("ISO_COUNTRY_CODE_NOT_ENABLED");
                }
            }
            //--geo-bypass-ip-block IP_BLOCK
            if(geoBypassIPBlockBox.isSelected()) {
                if(!geoBypassIPBlockField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --geo-bypass-ip-block "+geoBypassIPBlockBox.getText();
                    consoleLog.add("[info] geo-bypass IP block option has been applied "
                            + "successfully with the argument: "+countryCodeField.getText());
                }
                else {
                    consoleLog.add("[error!] the argument for geo-bypass IP block field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] geo-bypass IP block checkbox/field has been deselected to resolve the option error."); 
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements."); 
                    }
                    geoBypassIPBlockBox.setSelected(false);
                    geoBypassIPBlockField.setEnabled(false);
                    geoBypassIPBlockField.setText("GEO_BYPASS_IP_BLOCK");
                }                
            }
            
            /*
            * VIDEO-SELECTION OPTIONS
            */
            //--playlist-start NUMBER
            if(playlistStartBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + " --playlist-start " + playlistStartNoSpinner.getValue();
                consoleLog.add("[info] the playlist start NUMBER option has been applied successfully with"
                        + "the arguement: "+playlistStartNoSpinner.getValue());
            }
            //--playlist-end NUMBER
            if(playlistEndNoBox.isSelected()) {
                youtubeDLCommand = youtubeDLCommand + "" + playlistEndNoSpinner.getValue();
                consoleLog.add("[info] the playlist end NUMBER option has been applied successfully with"
                        + "the arguemnt: "+playlistEndNoSpinner.getValue());
            }
            //--playlist-items ITEM_SPEC
            if(playlistItemsBox.isSelected()) {
                if(!playlistItemsField.getText().isBlank()) {
                    youtubeDLCommand = youtubeDLCommand + " --playlist-items " + playlistItemsField.getText();
                    consoleLog.add("[info] playlist items option has been applied "
                            + "successfully with the argument: "+playlistItemsField.getText());                    
                }
                else {
                    consoleLog.add("[error!] the argument for playlist items field is empty, therefore the option is invalid.");
                    consoleLog.add("[action] playlist items checkbox/field has been deselected to resolve the option error."); 
                    if(verboseLogOutputBox.isSelected()) {
                        consoleLog.add("[alart] to solve this error manually, check the correct option box and be sure to"
                                + "enter the correct option argument.");
                        consoleLog.add("[alart] If this checkbox was accidentally selected then disregard these related statements."); 
                    }
                    matchTitleBox.setSelected(false);
                    matchTitleField.setText("PLAYLIST_ITEMS_NOT_ENABLED");
                    matchTitleField.setEnabled(false);
                }
            }
        }
       
        
        System.out.println(youtubeDLCommand);
    }
    
    
    
    private void resetAllSettingsAndDataActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       

    private void resetFilesystemSettingsPageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        batchFileBox.setSelected(false);
        batchFileField.setText("BATCH_FILE_NOT_ENABLED");
        batchFileField.setEnabled(false);
        batchFileSelectorButton.setEnabled(false);

        idBox.setSelected(false);
        outputBox.setSelected(false);

        outputField.setText("OUTPUT_NOT_ENABLED");
        outputField.setEnabled(false);

        outputPlaceholderBox.setSelected(false);
        outputPlaceholderField.setEnabled(false);
        outputPlaceholderField.setText("PLACEHOLDER_NOT_ENABLED");

        autoNumberStartBox.setSelected(false);
        autoNumberStartField.setEnabled(false);
        autoNumberStartField.setText("START_VALUE_NOT_ENABLED");

        restrictFilenamesBox.setSelected(false);
        noOverwritesBox.setSelected(false);

        continueSelectionGroup.clearSelection();
        resetContinueSelectionGroupButton.setSelected(false);

        noPartBox.setSelected(false);
        noMTimeBox.setSelected(false);
        writeDescriptionBox.setSelected(false);
        writeInfoJsonBox.setSelected(false);
        writeAnnotationsBox.setSelected(false);

        loadInfoJsonBox.setSelected(false);
        loadInfoJsonField.setEnabled(false);
        loadInfoJsonField.setText("FILE_NOT_ENABLED");
        loadJsonFileChooserButton.setEnabled(false);

        cookieBox.setSelected(false);
        cookieField.setEnabled(false);
        cookieField.setText("FILE_NOT_ENABLED");
        loadCookieDirChooserButton.setEnabled(false);

        cacheDirBox.setSelected(false);
        cacheDirField.setText("DIRECTORY_NOT_ENABLED");
        cacheDirField.setEnabled(false);
        loadCookieDirChooser.setEnabled(false);

        noCacheDirBox.setSelected(false);
        rmCacheDirBox.setSelected(false);
    }                                                                 

    private void noCacheDirBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void loadCookieDirChooserActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        JFileChooser loadCookieDir = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        loadCookieDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int userSelection = loadCookieDir.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = loadCookieDir.getSelectedFile();
            cacheDirField.setText(selectedFile.getPath());
        }
    }                                                    

    private void cacheDirFieldActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void cacheDirBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(cacheDirBox.isSelected()) {
            cacheDirField.setText("");
            cacheDirField.setEnabled(true);
            loadCookieDirChooser.setEnabled(true);
        }
        else {
            cacheDirField.setText("DIRECTORY_NOT_ENABLED");
            cacheDirField.setEnabled(false);
            loadCookieDirChooser.setEnabled(false);
        }
    }                                           

    private void loadCookieDirChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        JFileChooser cookiePath = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int userSelection = cookiePath.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = cookiePath.getSelectedFile();
            cookieField.setText(selectedFile.getAbsolutePath());
        }
    }                                                          

    private void cookieBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if(cookieBox.isSelected()) {
            cookieField.setEnabled(true);
            cookieField.setText("");
            loadCookieDirChooserButton.setEnabled(true);
        }
        else {
            cookieField.setEnabled(false);
            cookieField.setText("FILE_NOT_ENABLED");
            loadCookieDirChooserButton.setEnabled(false);
        }
    }                                         

    private void loadJsonFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        JFileChooser loadJsonPath = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int userSelection = loadJsonPath.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = loadJsonPath.getSelectedFile();
            loadInfoJsonField.setText(selectedFile.getAbsolutePath());
        }
    }                                                         

    private void loadInfoJsonBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(loadInfoJsonBox.isSelected()) {
            loadInfoJsonField.setEnabled(true);
            loadInfoJsonField.setText("");
            loadJsonFileChooserButton.setEnabled(true);
        }
        else {
            loadInfoJsonField.setEnabled(false);
            loadInfoJsonField.setText("FILE_NOT_ENABLED");
            loadJsonFileChooserButton.setEnabled(false);
        }
    }                                               

    private void resetContinueSelectionGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        resetContinueSelectionGroupButton.setEnabled(false);
        continueSelectionGroup.clearSelection();
    }                                                                 

    private void noContinueRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        resetContinueSelectionGroupButton.setEnabled(true);
    }                                                 

    private void continueRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        resetContinueSelectionGroupButton.setEnabled(true);
    }                                               

    private void noOverwritesBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void autoNumberStartBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if(autoNumberStartBox.isSelected()) {
            autoNumberStartField.setEnabled(true);
            autoNumberStartField.setText("");
        }
        else {
            autoNumberStartField.setEnabled(false);
            autoNumberStartField.setText("START_VALUE_NOT_ENABLED");
        }
    }                                                  

    private void outputPlaceholderFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void outputPlaceholderBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        if(outputPlaceholderBox.isSelected()) {
            outputPlaceholderField.setEnabled(true);
            outputPlaceholderField.setText("");
        }
        else {
            outputPlaceholderField.setEnabled(false);
            outputPlaceholderField.setText("PLACEHOLDER_NOT_ENABLED");
        }
    }                                                    

    private void outputBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if(outputBox.isSelected()) {
            outputField.setText("");
            outputField.setEnabled(true);
        }
        else {
            outputField.setText("OUTPUT_NOT_ENABLED");
            outputField.setEnabled(false);
        }
    }                                         

    private void batchFileSelectorButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        JFileChooser batchFile = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int userSelection = batchFile.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = batchFile.getSelectedFile();
            batchFileField.setText(selectedFile.getAbsolutePath());
        }
    }                                                       

    private void batchFileBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(batchFileBox.isSelected()) {
            batchFileField.setText("");
            batchFileField.setEnabled(true);
            batchFileSelectorButton.setEnabled(true);
        }
        else {
            batchFileField.setText("BATCH_FILE_NOT_ENABLED");
            batchFileField.setEnabled(false);
            batchFileSelectorButton.setEnabled(false);
        }
    }                                            

    private void resetVerbositySimulationSettingsPageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                           
        quietBox.setSelected(false);
        noWarningsBox.setSelected(false);
        simulateBox.setSelected(false);
        skipDownloadBox.setSelected(false);
        getURLBox.setSelected(false);
        getTitleBox.setSelected(false);
        getIDBox.setSelected(false);
        getThumbnailBox.setSelected(false);
        getDescriptionBox.setSelected(false);
        getDurationBox.setSelected(false);
        getFilenameBox.setSelected(false);
        getFormatBox.setSelected(false);
        dumpJsonBox.setSelected(false);
        dumpSingleJsonBox.setSelected(false);
        printJsonBox.setSelected(false);
        newlineBox.setSelected(false);
        noProgressBox.setSelected(false);
        consoleTitleBox.setSelected(false);
        verboseBox.setSelected(false);
        dumpPagesBox.setSelected(false);
        writePagesBox.setSelected(false);
        printTrafficBox.setSelected(false);
        callHomeSelectionGroup.clearSelection();
        callHomeSelectionResetButton.setEnabled(false);
    }                                                                          

    private void callHomeSelectionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                             
        callHomeSelectionResetButton.setEnabled(false);
        callHomeSelectionGroup.clearSelection();
    }                                                            

    private void noCallHomeRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        callHomeSelectionResetButton.setEnabled(true);
    }                                                 

    private void callHomeRButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        callHomeSelectionResetButton.setEnabled(true);
    }                                               

    private void dumpSingleJsonBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void xattrsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void customCodeBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(customCodeBox.isSelected()) {
            customCodeField.setEnabled(true);
            customCodeField.setText("");
            customCodeArgumentsBox.setEnabled(true);
        }
        else {
            customCodeField.setEnabled(false);
            customCodeField.setText("CODE_NOT_ENABLED");
            customCodeArgumentsBox.setEnabled(false);
            customCodeArgumentsBox.setSelected(false);
            customCodeArgumentsField.setEnabled(false);
            customCodeArgumentsField.setText("CODE_ARG_NOT_ENABLED");
        }
    }                                             

    private void resetCommandGenerationSettingsPageActionPerformed(java.awt.event.ActionEvent evt) {                                                                   
        videoURLField.setText("");
        verboseLogOutputBox.setSelected(false);
        customCodeBox.setSelected(false);
        customCodeField.setEnabled(false);
        customCodeField.setText("CODE_NOT_ENABLED");
        customCodeArgumentsBox.setSelected(false);
        customCodeArgumentsField.setText("CODE_ARG_NOT_ENABLED");
        customCodeArgumentsField.setEnabled(false);
    }                                                                  

    private void customCodeArgumentsBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        if(customCodeArgumentsBox.isSelected()) {
            customCodeArgumentsField.setText("");
            customCodeArgumentsField.setEnabled(true);
        }
        else {
            customCodeArgumentsField.setText("CODE_ARG_NOT_ENABLED");
            customCodeArgumentsField.setEnabled(true);            
        }
    }                                                      

    private void customCodeArgumentsFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    

    /*
    PUBLIC ARRAYLIST/OBJECTS/VARIABLES
    */
    
    
    /**
     * @param args the command line arguments
     */
    

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoutubeDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoutubeDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoutubeDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoutubeDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YoutubeDL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane GeneralOptionsScroll;
    private javax.swing.JButton IPvSelectionResetButton;
    private javax.swing.ButtonGroup IPvSettingsGroup;
    private javax.swing.JScrollPane NetworkOptionScroll;
    private javax.swing.JScrollPane ThumbnailScroll;
    private javax.swing.JCheckBox abortOnErrorBox;
    private javax.swing.JCheckBox abortOnUnavailableFragmentBox;
    private javax.swing.JCheckBox addHeaderBox;
    private javax.swing.JButton addHeaderButton;
    private javax.swing.JLabel addHeaderLabel;
    private javax.swing.JLabel addHeaderLabel1;
    private javax.swing.JCheckBox addMetaDataBox;
    private javax.swing.JTextField adobeMSOField;
    private javax.swing.JCheckBox adobePassAccountBox;
    private javax.swing.JLabel adobePassLabel;
    private javax.swing.JCheckBox adobePassMSOBox;
    private javax.swing.JPanel adobePassOptions;
    private javax.swing.JScrollPane adobePassScroll;
    private javax.swing.JButton adobePassSettingsPageReset;
    private javax.swing.JPasswordField adobePasswordField;
    private javax.swing.JCheckBox adobeShowPasswordBox;
    private javax.swing.JTextField adobeUserNameField;
    private javax.swing.JCheckBox ageLimitBox;
    private javax.swing.JSpinner ageLimitSpinner;
    private javax.swing.JCheckBox allFormatsBox;
    private javax.swing.JCheckBox allSubsBox;
    private javax.swing.JCheckBox apListMSOBox;
    private javax.swing.JCheckBox audioFormatBox;
    private javax.swing.JComboBox<String> audioFormatComboBox;
    private javax.swing.JCheckBox audioQualityBox;
    private javax.swing.JLabel audioQualityLabel;
    private javax.swing.JSpinner audioQualityValueSpinner;
    private javax.swing.JLabel authenticationLabel;
    private javax.swing.JPanel authenticationOptions;
    private javax.swing.JScrollPane authenticationScroll;
    private javax.swing.JButton authenticationSettingsPageResetButton;
    private javax.swing.JCheckBox autoNumberStartBox;
    private javax.swing.JTextField autoNumberStartField;
    private javax.swing.JCheckBox batchFileBox;
    private javax.swing.JTextField batchFileField;
    private javax.swing.JButton batchFileSelectorButton;
    private javax.swing.JCheckBox bidiWorkaroundBox;
    private javax.swing.JLabel bidiWorkaroundLabel;
    private javax.swing.JCheckBox bufferSizeBox;
    private javax.swing.JTextField bufferSizeField;
    private javax.swing.JCheckBox cacheDirBox;
    private javax.swing.JTextField cacheDirField;
    private javax.swing.JRadioButton callHomeRButton;
    private javax.swing.ButtonGroup callHomeSelectionGroup;
    private javax.swing.JButton callHomeSelectionResetButton;
    private javax.swing.JButton clearHeaderListButton;
    private javax.swing.JLabel commandGenerationLabel;
    private javax.swing.JPanel commandGenerationPanel;
    private javax.swing.JScrollPane commandGenerationScroll;
    private javax.swing.JTabbedPane commandOptionsTabs;
    private javax.swing.JButton configDirChooserButton;
    private javax.swing.JCheckBox configLocationBox;
    private javax.swing.JTextField configLocationField;
    private javax.swing.JCheckBox consoleTitleBox;
    private javax.swing.JRadioButton continueRButton;
    private javax.swing.ButtonGroup continueSelectionGroup;
    private javax.swing.JCheckBox convertSubBox;
    private javax.swing.JComboBox<String> convertSubComboBox;
    private javax.swing.JCheckBox cookieBox;
    private javax.swing.JTextField cookieField;
    private javax.swing.JButton copyLogToClipboardButton;
    private javax.swing.JButton copyOutputToClipboardButton;
    private javax.swing.JTextField countryCodeField;
    private javax.swing.JCheckBox customCodeArgumentsBox;
    private javax.swing.JTextField customCodeArgumentsField;
    private javax.swing.JCheckBox customCodeBox;
    private javax.swing.JTextField customCodeField;
    private javax.swing.JCheckBox dateAfterBox;
    private javax.swing.JTextField dateAfterField;
    private javax.swing.JCheckBox dateBeforeBox;
    private javax.swing.JTextField dateBeforeField;
    private javax.swing.JCheckBox dateBox;
    private javax.swing.JTextField dateField;
    private javax.swing.JCheckBox defaultSearchBox;
    private javax.swing.JButton deleteHeaderButton;
    private javax.swing.JCheckBox downloadArchiveBox;
    private javax.swing.JButton downloadArchiveFileChooserButton;
    private javax.swing.JTextField downloadArchivePathField;
    private javax.swing.JLabel downloadLabel;
    private javax.swing.JPanel downloadOptions;
    private javax.swing.JScrollPane downloadScroll;
    private javax.swing.JCheckBox dumpJsonBox;
    private javax.swing.JCheckBox dumpPagesBox;
    private javax.swing.JLabel dumpPagesLabel;
    private javax.swing.JCheckBox dumpSingleJsonBox;
    private javax.swing.JLabel dumpSingleJsonField1;
    private javax.swing.JLabel dumpSingleJsonField2;
    private javax.swing.JCheckBox dumpUserAgentBox;
    private javax.swing.JCheckBox editorModeBox;
    private javax.swing.JCheckBox embedSubBox;
    private javax.swing.JLabel embedSubLabel;
    private javax.swing.JCheckBox embedThumbnailBox;
    private javax.swing.JCheckBox encodingBox;
    private javax.swing.JTextField encodingField;
    private javax.swing.JCheckBox execBox;
    private javax.swing.JTextField execField;
    private javax.swing.JCheckBox externalDownloaderArgsBox;
    private javax.swing.JTextField externalDownloaderArgsField;
    private javax.swing.JCheckBox externalDownloaderBox;
    private javax.swing.JTextField externalDownloaderField;
    private javax.swing.JCheckBox extractAudioBox;
    private javax.swing.JLabel extractAudioLabel;
    private javax.swing.JCheckBox extractorDescriptionsBox;
    private javax.swing.JButton ffmpegDirChooserButton;
    private javax.swing.JTextField ffmpegLocationField;
    private javax.swing.JCheckBox ffmpegLocationPathBox;
    private javax.swing.JLabel ffmpegLocationPathLabel;
    private javax.swing.JPanel fileSystemOptions;
    private javax.swing.JLabel filesystemLabel;
    private javax.swing.JScrollPane filesystemScroll;
    private javax.swing.JCheckBox fixUpBox;
    private javax.swing.JTextField fixUpField;
    private javax.swing.JLabel fixUpLabel;
    private javax.swing.JCheckBox flatPlaylistBox;
    private javax.swing.JCheckBox forceGenericExtractorsBox;
    private javax.swing.JRadioButton forceIPv4RButton;
    private javax.swing.JRadioButton forceIPv6RButton;
    private javax.swing.JCheckBox fragmentRetriesBox;
    private javax.swing.JSpinner fragmentRetriesSpinner;
    private javax.swing.JPanel generalOptions;
    private javax.swing.JLabel generalOptionsLabel;
    private javax.swing.JButton generateCommandsButton;
    private javax.swing.JCheckBox geoBypassCountryCodeBox;
    private javax.swing.JCheckBox geoBypassIPBlockBox;
    private javax.swing.JTextField geoBypassIPBlockField;
    private javax.swing.JRadioButton geoBypassRButton;
    private javax.swing.JButton geoBypassSelectionResetButton;
    private javax.swing.ButtonGroup geoBypassSettingsGroup;
    private javax.swing.JCheckBox geoProxyBox;
    private javax.swing.JTextField geoProxyURLField;
    private javax.swing.JLabel geoRestrictionLabel;
    private javax.swing.JCheckBox getDescriptionBox;
    private javax.swing.JCheckBox getDurationBox;
    private javax.swing.JCheckBox getFilenameBox;
    private javax.swing.JCheckBox getFormatBox;
    private javax.swing.JCheckBox getIDBox;
    private javax.swing.JCheckBox getThumbnailBox;
    private javax.swing.JCheckBox getTitleBox;
    private javax.swing.JCheckBox getURLBox;
    private javax.swing.JTextField headerField;
    private javax.swing.JList<String> headerList;
    private javax.swing.JScrollPane headerListScroll;
    private javax.swing.JRadioButton helpRButton;
    private javax.swing.JRadioButton hlsPreferFfmpegRButton;
    private javax.swing.JRadioButton hlsPreferNativeRButton;
    private javax.swing.ButtonGroup hlsSelectionGroup;
    private javax.swing.JToggleButton hlsSelectionResetButton;
    private javax.swing.JCheckBox hlsUseMpegtsBox;
    private javax.swing.JCheckBox httpChunkSizeBox;
    private javax.swing.JTextField httpChunkSizeField;
    private javax.swing.JCheckBox idBox;
    private javax.swing.JCheckBox ignoreConfigBox;
    private javax.swing.JCheckBox ignoreErrorsBox;
    private javax.swing.JCheckBox includeAddsBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox keepFragmentsBox;
    private javax.swing.JCheckBox keepVideoBox;
    private javax.swing.JLabel keepVideoLabel;
    private javax.swing.JCheckBox limitRateBox;
    private javax.swing.JTextField limitRateField;
    private javax.swing.JCheckBox listExtractorsBox;
    private javax.swing.JCheckBox listFormatsBox;
    private javax.swing.JCheckBox listSubsBox;
    private javax.swing.JCheckBox listThumbnailsBox;
    private javax.swing.JButton loadCookieDirChooser;
    private javax.swing.JButton loadCookieDirChooserButton;
    private javax.swing.JCheckBox loadInfoJsonBox;
    private javax.swing.JTextField loadInfoJsonField;
    private javax.swing.JButton loadJsonFileChooserButton;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel logLabel;
    private javax.swing.JScrollPane logScroll;
    private javax.swing.JCheckBox markedWatchedBox;
    private javax.swing.JCheckBox matchFilterBox;
    private javax.swing.JTextField matchFilterField;
    private javax.swing.JCheckBox matchTitleBox;
    private javax.swing.JTextField matchTitleField;
    private javax.swing.JCheckBox maxDownloadsNoBox;
    private javax.swing.JSpinner maxDownloadsNoSpinner;
    private javax.swing.JCheckBox maxFileSizeBox;
    private javax.swing.JTextField maxFileSizeField;
    private javax.swing.JCheckBox maxSleepIntervalBox;
    private javax.swing.JSpinner maxSleepIntervalSpinner;
    private javax.swing.JCheckBox maxViewsBox;
    private javax.swing.JSpinner maxViewsSpinner;
    private javax.swing.JCheckBox mergeOutputFormatBox;
    private javax.swing.JCheckBox metaDataFromTitleBox;
    private javax.swing.JTextField metaDataFromTitleField;
    private javax.swing.JLabel metaDataFromTitleLabel;
    private javax.swing.JCheckBox minFileSizeBox;
    private javax.swing.JTextField minFileSizeField;
    private javax.swing.JCheckBox minViewsBox;
    private javax.swing.JSpinner minViewsSpinner;
    private javax.swing.JCheckBox netrcBox;
    private javax.swing.JLabel networkLabel;
    private javax.swing.JPanel networkOptions;
    private javax.swing.JCheckBox newlineBox;
    private javax.swing.JCheckBox noCacheDirBox;
    private javax.swing.JRadioButton noCallHomeRButton;
    private javax.swing.JCheckBox noCheckCertificateBox;
    private javax.swing.JCheckBox noColorBox;
    private javax.swing.JRadioButton noContinueRButton;
    private javax.swing.JRadioButton noGeoBypassRButton;
    private javax.swing.JCheckBox noMTimeBox;
    private javax.swing.JCheckBox noMarkedWatchedBox;
    private javax.swing.JCheckBox noOverwritesBox;
    private javax.swing.JCheckBox noPartBox;
    private javax.swing.JRadioButton noPlaylistRButton;
    private javax.swing.JCheckBox noPostOverwritesBox;
    private javax.swing.JCheckBox noProgressBox;
    private javax.swing.JCheckBox noResizeBufferBox;
    private javax.swing.JCheckBox noWarningsBox;
    private javax.swing.JTextArea output;
    private javax.swing.JCheckBox outputBox;
    private javax.swing.JTextField outputField;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JCheckBox outputPlaceholderBox;
    private javax.swing.JTextField outputPlaceholderField;
    private javax.swing.JScrollPane outputScroll;
    private javax.swing.JLabel outputsHeader;
    private javax.swing.JCheckBox passwordBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JCheckBox playlistEndNoBox;
    private javax.swing.JSpinner playlistEndNoSpinner;
    private javax.swing.JCheckBox playlistItemsBox;
    private javax.swing.JTextField playlistItemsField;
    private javax.swing.JCheckBox playlistRandomBox;
    private javax.swing.JCheckBox playlistReverseBox;
    private javax.swing.ButtonGroup playlistSelectionGroup;
    private javax.swing.JButton playlistSelectionResetButton;
    private javax.swing.JCheckBox playlistStartBox;
    private javax.swing.JSpinner playlistStartNoSpinner;
    private javax.swing.JLabel postProcessingLabel;
    private javax.swing.JPanel postProcessingPanel;
    private javax.swing.JScrollPane postProcessingScroll;
    private javax.swing.JCheckBox postProcessorArgsBox;
    private javax.swing.JTextField postProcessorArgsField;
    private javax.swing.ButtonGroup postProcessorGroup;
    private javax.swing.JButton postProcessorSettingResetButton;
    private javax.swing.JRadioButton preferAvconvRButton;
    private javax.swing.JRadioButton preferFfmpegRButton;
    private javax.swing.JCheckBox preferFreeFormatsBox;
    private javax.swing.JCheckBox preferInsecureBox;
    private javax.swing.JLabel preferInsecureLabel;
    private javax.swing.JCheckBox printJsonBox;
    private javax.swing.JLabel printJsonLabel;
    private javax.swing.JCheckBox printTrafficBox;
    private javax.swing.JLabel printTrafficField;
    private javax.swing.JCheckBox proxyServerBox;
    private javax.swing.JTextField proxyURLField;
    private javax.swing.JCheckBox quietBox;
    private javax.swing.JCheckBox recodeVideoBox;
    private javax.swing.JComboBox<String> recodeVideoComboBox;
    private javax.swing.JCheckBox refererBox;
    private javax.swing.JTextField refererField;
    private javax.swing.JLabel refererLabel;
    private javax.swing.JCheckBox rejectTitleBox;
    private javax.swing.JTextField rejectTitleField;
    private javax.swing.JButton resetAllSettingsAndData;
    private javax.swing.JButton resetCommandGenerationSettingsPage;
    private javax.swing.JButton resetContinueSelectionGroupButton;
    private javax.swing.JButton resetDownloaderOptionsSettingsPage;
    private javax.swing.JButton resetFilesystemSettingsPageButton;
    private javax.swing.JButton resetGeneralSettingsPageButton;
    private javax.swing.JButton resetNetworkGeoSettingsPageButton;
    private javax.swing.JButton resetThumnailSettingsPage;
    private javax.swing.JButton resetVerbositySimulationSettingsPageButton;
    private javax.swing.JButton resetVideoFormatSettingsPage;
    private javax.swing.JButton resetVideoSelectionSettingsPage;
    private javax.swing.JButton resetWorkaroundSettingsPage;
    private javax.swing.JButton resetWorkaroundsSettingsPageButton;
    private javax.swing.JCheckBox restrictFilenamesBox;
    private javax.swing.JCheckBox retriesBox;
    private javax.swing.JSpinner retriesSpinner;
    private javax.swing.JCheckBox rmCacheDirBox;
    private javax.swing.JTextField searchPrefixField;
    private javax.swing.JLabel settingsHeader;
    private javax.swing.JCheckBox showPasswordBox;
    private javax.swing.JCheckBox simulateBox;
    private javax.swing.ButtonGroup singleCommandGroup;
    private javax.swing.JButton singleCommandResetButton;
    private javax.swing.JLabel singleUseCommandsLabel;
    private javax.swing.JCheckBox skipDownloadBox;
    private javax.swing.JCheckBox skipUnavailableFragmentsBox;
    private javax.swing.JCheckBox sleepIntervalBox;
    private javax.swing.JSpinner sleepIntervalSecondsSpinner;
    private javax.swing.JCheckBox socketTimeoutBox;
    private javax.swing.JSpinner socketTimeoutSecondsSpinner;
    private javax.swing.JCheckBox sourceIPAddressBox;
    private javax.swing.JTextField sourceIPField;
    private javax.swing.JCheckBox subFormatBox;
    private javax.swing.JTextField subFormatField;
    private javax.swing.JCheckBox subLangBox;
    private javax.swing.JTextField subLangField;
    private javax.swing.JLabel subtitleLabel;
    private javax.swing.JPanel subtitleOptions;
    private javax.swing.JScrollPane subtitleScroll;
    private javax.swing.JButton subtitleSettingsPageReset;
    private javax.swing.JLabel thumbnailLabel;
    private javax.swing.JPanel thumbnailOptions;
    private javax.swing.JCheckBox twoFactorBox;
    private javax.swing.JTextField twoFactorField;
    private javax.swing.JRadioButton updateRButton;
    private javax.swing.JCheckBox userAgentBox;
    private javax.swing.JTextField userAgentField;
    private javax.swing.JCheckBox userNameBox;
    private javax.swing.JTextField userNameField;
    private javax.swing.JTextField valueField;
    private javax.swing.JCheckBox verboseBox;
    private javax.swing.JCheckBox verboseLogOutputBox;
    private javax.swing.JLabel verbositySimulationLabel;
    private javax.swing.JPanel verbositySimulationPanel;
    private javax.swing.JScrollPane verbositySimulationScroll;
    private javax.swing.JRadioButton versionRButton;
    private javax.swing.JCheckBox videoFormatCodeBox;
    private javax.swing.JTextField videoFormatField;
    private javax.swing.JLabel videoFormatLabel;
    private javax.swing.JPanel videoFormatOptions;
    private javax.swing.JScrollPane videoFormatScroll;
    private javax.swing.JCheckBox videoPasswordBox;
    private javax.swing.JTextField videoPasswordField;
    private javax.swing.JLabel videoSelectionLabel;
    private javax.swing.JPanel videoSelectionOptions;
    private javax.swing.JScrollPane videoSelectionScroll;
    private javax.swing.JTextField videoURLField;
    private javax.swing.JLabel videoURLLabel;
    private javax.swing.JPanel workaroundPanel;
    private javax.swing.JLabel workaroundsLabel;
    private javax.swing.JScrollPane workaroundsScroll;
    private javax.swing.JCheckBox writeAllThumbnailsBox;
    private javax.swing.JCheckBox writeAnnotationsBox;
    private javax.swing.JCheckBox writeAutoSubBox;
    private javax.swing.JCheckBox writeDescriptionBox;
    private javax.swing.JCheckBox writeInfoJsonBox;
    private javax.swing.JCheckBox writePagesBox;
    private javax.swing.JLabel writePagesField;
    private javax.swing.JCheckBox writeSubBox;
    private javax.swing.JCheckBox writeThumbnailBox;
    private javax.swing.JCheckBox xattrSetFilesizeBox;
    private javax.swing.JCheckBox xattrsBox;
    private javax.swing.JLabel xattrsLabel;
    private javax.swing.JRadioButton yesPlaylistRButton;
    private javax.swing.JCheckBox youTubeSkipDashBox;
    // End of variables declaration                   
}
